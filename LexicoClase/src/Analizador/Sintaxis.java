

package Analizador;

import java_cup.runtime.Symbol;


public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\004\000\002\002\015\000\002\002" +
    "\014\000\002\002\015\000\002\002\014\000\002\042\004" +
    "\000\002\042\003\000\002\042\004\000\002\042\003\000" +
    "\002\042\004\000\002\042\003\000\002\042\004\000\002" +
    "\042\003\000\002\046\006\000\002\006\011\000\002\006" +
    "\007\000\002\006\011\000\002\006\007\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\005\000" +
    "\002\003\004\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\041\004\000\002\041\003\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\007\000\002\004\005\000\002\004\007\000" +
    "\002\004\011\000\002\004\007\000\002\004\011\000\002" +
    "\004\007\000\002\004\011\000\002\004\007\000\002\004" +
    "\011\000\002\004\007\000\002\004\007\000\002\004\011" +
    "\000\002\004\007\000\002\004\011\000\002\004\011\000" +
    "\002\004\007\000\002\004\011\000\002\004\006\000\002" +
    "\004\006\000\002\004\010\000\002\004\010\000\002\004" +
    "\011\000\002\004\011\000\002\004\006\000\002\004\006" +
    "\000\002\004\007\000\002\004\010\000\002\004\010\000" +
    "\002\004\005\000\002\004\010\000\002\004\012\000\002" +
    "\004\012\000\002\004\012\000\002\011\007\000\002\010" +
    "\011\000\002\033\003\000\002\033\003\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\006\000\002\033\007\000\002\031\011\000\002\014" +
    "\013\000\002\032\011\000\002\035\006\000\002\035\006" +
    "\000\002\035\006\000\002\035\006\000\002\035\006\000" +
    "\002\035\006\000\002\035\006\000\002\035\006\000\002" +
    "\035\006\000\002\035\006\000\002\040\010\000\002\040" +
    "\010\000\002\040\012\000\002\040\010\000\002\040\012" +
    "\000\002\040\010\000\002\040\012\000\002\040\010\000" +
    "\002\040\012\000\002\040\010\000\002\040\012\000\002" +
    "\040\012\000\002\040\012\000\002\040\010\000\002\040" +
    "\010\000\002\021\016\000\002\036\004\000\002\036\003" +
    "\000\002\037\010\000\002\020\010\000\002\007\006\000" +
    "\002\007\010\000\002\007\010\000\002\007\010\000\002" +
    "\025\005\000\002\026\004\000\002\026\003\000\002\043" +
    "\004\000\002\043\006\000\002\043\003\000\002\043\005" +
    "\000\002\024\005\000\002\027\004\000\002\027\003\000" +
    "\002\030\004\000\002\030\003\000\002\022\006\000\002" +
    "\044\004\000\002\044\003\000\002\045\004\000\002\045" +
    "\007\000\002\045\003\000\002\045\006\000\002\045\005" +
    "\000\002\023\012\000\002\047\011\000\002\034\012\000" +
    "\002\034\012\000\002\034\012\000\002\034\012\000\002" +
    "\034\012\000\002\034\012\000\002\034\012\000\002\034" +
    "\011\000\002\005\005\000\002\005\004\000\002\005\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ce\000\010\031\010\101\007\111\012\001\002\000" +
    "\014\016\ufff9\031\ufff9\064\ufff9\101\ufff9\111\ufff9\001\002" +
    "\000\014\016\ufff7\031\ufff7\064\ufff7\101\ufff7\111\ufff7\001" +
    "\002\000\004\002\u01d0\001\002\000\006\102\u01b8\103\u01b9" +
    "\001\002\000\004\070\u01b1\001\002\000\014\016\022\031" +
    "\010\064\023\101\007\111\012\001\002\000\004\112\015" +
    "\001\002\000\014\016\ufff5\031\ufff5\064\ufff5\101\ufff5\111" +
    "\ufff5\001\002\000\014\016\ufffb\031\ufffb\064\ufffb\101\ufffb" +
    "\111\ufffb\001\002\000\004\070\016\001\002\000\004\065" +
    "\017\001\002\000\014\016\ufff4\031\ufff4\064\ufff4\101\ufff4" +
    "\111\ufff4\001\002\000\014\016\ufffa\031\ufffa\064\ufffa\101" +
    "\ufffa\111\ufffa\001\002\000\014\016\ufff8\031\ufff8\064\ufff8" +
    "\101\ufff8\111\ufff8\001\002\000\004\064\u01a5\001\002\000" +
    "\004\056\026\001\002\000\014\016\ufff6\031\ufff6\064\ufff6" +
    "\101\ufff6\111\ufff6\001\002\000\014\016\ufffc\031\ufffc\064" +
    "\ufffc\101\ufffc\111\ufffc\001\002\000\004\057\027\001\002" +
    "\000\004\060\030\001\002\000\062\006\037\010\050\011" +
    "\036\013\060\014\044\015\052\016\046\017\034\020\075" +
    "\021\051\022\057\024\065\025\035\030\043\031\072\032" +
    "\063\042\055\043\074\070\071\073\054\074\066\075\073" +
    "\076\042\113\031\001\002\000\004\056\u019f\001\002\000" +
    "\070\006\uffea\010\uffea\011\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\024\uffea\025" +
    "\uffea\026\uffea\030\uffea\031\uffea\032\uffea\040\uffea\042\uffea" +
    "\043\uffea\061\uffea\070\uffea\073\uffea\074\uffea\075\uffea\076" +
    "\uffea\113\uffea\001\002\000\070\006\uffd6\010\uffd6\011\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\040\uffd6\042\uffd6\043\uffd6\061\uffd6\070\uffd6\073" +
    "\uffd6\074\uffd6\075\uffd6\076\uffd6\113\uffd6\001\002\000\004" +
    "\070\u0197\001\002\000\004\070\u018f\001\002\000\004\056" +
    "\u0189\001\002\000\006\054\u0176\070\u0177\001\002\000\064" +
    "\006\037\010\050\011\036\013\060\014\044\015\052\016" +
    "\046\017\034\020\075\021\051\022\057\024\065\025\035" +
    "\030\043\031\072\032\250\040\u016f\042\055\043\074\070" +
    "\071\073\054\074\066\075\073\076\042\113\031\001\002" +
    "\000\070\006\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\040\uffe6\042" +
    "\uffe6\043\uffe6\061\uffe6\070\uffe6\073\uffe6\074\uffe6\075\uffe6" +
    "\076\uffe6\113\uffe6\001\002\000\006\005\u0166\070\u0168\001" +
    "\002\000\004\070\u015d\001\002\000\004\056\u0157\001\002" +
    "\000\070\006\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\040\uffe2\042" +
    "\uffe2\043\uffe2\061\uffe2\070\uffe2\073\uffe2\074\uffe2\075\uffe2" +
    "\076\uffe2\113\uffe2\001\002\000\004\070\u0152\001\002\000" +
    "\072\006\uffec\010\uffec\011\uffec\012\256\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\024" +
    "\uffec\025\uffec\026\uffec\030\uffec\031\uffec\032\uffec\040\uffec" +
    "\042\uffec\043\uffec\061\uffec\070\uffec\073\uffec\074\uffec\075" +
    "\uffec\076\uffec\113\uffec\001\002\000\004\070\u0142\001\002" +
    "\000\004\070\u013a\001\002\000\004\056\357\001\002\000" +
    "\070\006\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4\040\uffd4\042\uffd4" +
    "\043\uffd4\061\uffd4\070\uffd4\073\uffd4\074\uffd4\075\uffd4\076" +
    "\uffd4\113\uffd4\001\002\000\006\005\341\070\343\001\002" +
    "\000\004\056\316\001\002\000\070\006\uffda\010\uffda\011" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\024\uffda\025\uffda\026\uffda\030\uffda\031" +
    "\uffda\032\uffda\040\uffda\042\uffda\043\uffda\061\uffda\070\uffda" +
    "\073\uffda\074\uffda\075\uffda\076\uffda\113\uffda\001\002\000" +
    "\004\070\307\001\002\000\004\060\234\001\002\000\070" +
    "\006\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\030\uffd8\031\uffd8\032\uffd8\040\uffd8\042\uffd8\043" +
    "\uffd8\061\uffd8\070\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8" +
    "\113\uffd8\001\002\000\070\006\uffe0\010\uffe0\011\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\040\uffe0\042\uffe0\043\uffe0\061\uffe0\070\uffe0\073\uffe0" +
    "\074\uffe0\075\uffe0\076\uffe0\113\uffe0\001\002\000\004\065" +
    "\233\001\002\000\070\006\uffee\010\uffee\011\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\024\uffee\025\uffee\026\uffee\030\uffee\031\uffee\032\uffee" +
    "\040\uffee\042\uffee\043\uffee\061\uffee\070\uffee\073\uffee\074" +
    "\uffee\075\uffee\076\uffee\113\uffee\001\002\000\004\070\223" +
    "\001\002\000\004\005\214\001\002\000\070\006\uffdc\010" +
    "\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\040\uffdc\042\uffdc\043\uffdc\061\uffdc" +
    "\070\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\113\uffdc\001" +
    "\002\000\070\006\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\040\uffe8" +
    "\042\uffe8\043\uffe8\061\uffe8\070\uffe8\073\uffe8\074\uffe8\075" +
    "\uffe8\076\uffe8\113\uffe8\001\002\000\012\044\156\054\155" +
    "\066\153\070\154\001\002\000\004\070\150\001\002\000" +
    "\004\070\143\001\002\000\026\006\110\010\107\016\112" +
    "\017\115\020\114\021\105\022\111\024\104\025\106\030" +
    "\113\001\002\000\004\070\077\001\002\000\070\006\uffe4" +
    "\010\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\040\uffe4\042\uffe4\043\uffe4\061" +
    "\uffe4\070\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\113\uffe4" +
    "\001\002\000\006\044\101\065\100\001\002\000\070\006" +
    "\uffcb\010\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\040\uffcb\042\uffcb\043\uffcb" +
    "\061\uffcb\070\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\113" +
    "\uffcb\001\002\000\004\055\102\001\002\000\004\065\103" +
    "\001\002\000\070\006\uffbd\010\uffbd\011\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\030\uffbd\031\uffbd\032\uffbd\040" +
    "\uffbd\042\uffbd\043\uffbd\061\uffbd\070\uffbd\073\uffbd\074\uffbd" +
    "\075\uffbd\076\uffbd\113\uffbd\001\002\000\004\070\140\001" +
    "\002\000\004\070\136\001\002\000\004\070\134\001\002" +
    "\000\004\070\132\001\002\000\004\070\130\001\002\000" +
    "\004\070\126\001\002\000\004\070\124\001\002\000\004" +
    "\070\122\001\002\000\004\070\120\001\002\000\004\070" +
    "\116\001\002\000\004\065\117\001\002\000\070\006\uff94" +
    "\010\uff94\011\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\024\uff94\025\uff94\026\uff94" +
    "\030\uff94\031\uff94\032\uff94\040\uff94\042\uff94\043\uff94\061" +
    "\uff94\070\uff94\073\uff94\074\uff94\075\uff94\076\uff94\113\uff94" +
    "\001\002\000\004\065\121\001\002\000\070\006\uff8d\010" +
    "\uff8d\011\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d" +
    "\020\uff8d\021\uff8d\022\uff8d\024\uff8d\025\uff8d\026\uff8d\030" +
    "\uff8d\031\uff8d\032\uff8d\040\uff8d\042\uff8d\043\uff8d\061\uff8d" +
    "\070\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\113\uff8d\001" +
    "\002\000\004\065\123\001\002\000\070\006\uff93\010\uff93" +
    "\011\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020" +
    "\uff93\021\uff93\022\uff93\024\uff93\025\uff93\026\uff93\030\uff93" +
    "\031\uff93\032\uff93\040\uff93\042\uff93\043\uff93\061\uff93\070" +
    "\uff93\073\uff93\074\uff93\075\uff93\076\uff93\113\uff93\001\002" +
    "\000\004\065\125\001\002\000\070\006\uff95\010\uff95\011" +
    "\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\024\uff95\025\uff95\026\uff95\030\uff95\031" +
    "\uff95\032\uff95\040\uff95\042\uff95\043\uff95\061\uff95\070\uff95" +
    "\073\uff95\074\uff95\075\uff95\076\uff95\113\uff95\001\002\000" +
    "\004\065\127\001\002\000\070\006\uff8f\010\uff8f\011\uff8f" +
    "\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021" +
    "\uff8f\022\uff8f\024\uff8f\025\uff8f\026\uff8f\030\uff8f\031\uff8f" +
    "\032\uff8f\040\uff8f\042\uff8f\043\uff8f\061\uff8f\070\uff8f\073" +
    "\uff8f\074\uff8f\075\uff8f\076\uff8f\113\uff8f\001\002\000\004" +
    "\065\131\001\002\000\070\006\uff8c\010\uff8c\011\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\024\uff8c\025\uff8c\026\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\040\uff8c\042\uff8c\043\uff8c\061\uff8c\070\uff8c\073\uff8c" +
    "\074\uff8c\075\uff8c\076\uff8c\113\uff8c\001\002\000\004\065" +
    "\133\001\002\000\070\006\uff8e\010\uff8e\011\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022" +
    "\uff8e\024\uff8e\025\uff8e\026\uff8e\030\uff8e\031\uff8e\032\uff8e" +
    "\040\uff8e\042\uff8e\043\uff8e\061\uff8e\070\uff8e\073\uff8e\074" +
    "\uff8e\075\uff8e\076\uff8e\113\uff8e\001\002\000\004\065\135" +
    "\001\002\000\070\006\uff92\010\uff92\011\uff92\013\uff92\014" +
    "\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92" +
    "\024\uff92\025\uff92\026\uff92\030\uff92\031\uff92\032\uff92\040" +
    "\uff92\042\uff92\043\uff92\061\uff92\070\uff92\073\uff92\074\uff92" +
    "\075\uff92\076\uff92\113\uff92\001\002\000\004\065\137\001" +
    "\002\000\070\006\uff90\010\uff90\011\uff90\013\uff90\014\uff90" +
    "\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\024" +
    "\uff90\025\uff90\026\uff90\030\uff90\031\uff90\032\uff90\040\uff90" +
    "\042\uff90\043\uff90\061\uff90\070\uff90\073\uff90\074\uff90\075" +
    "\uff90\076\uff90\113\uff90\001\002\000\004\065\141\001\002" +
    "\000\070\006\uff91\010\uff91\011\uff91\013\uff91\014\uff91\015" +
    "\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\024\uff91" +
    "\025\uff91\026\uff91\030\uff91\031\uff91\032\uff91\040\uff91\042" +
    "\uff91\043\uff91\061\uff91\070\uff91\073\uff91\074\uff91\075\uff91" +
    "\076\uff91\113\uff91\001\002\000\006\065\146\070\143\001" +
    "\002\000\010\065\uff68\070\uff68\110\145\001\002\000\006" +
    "\065\uff6a\070\uff6a\001\002\000\006\065\uff69\070\uff69\001" +
    "\002\000\070\006\uff6c\010\uff6c\011\uff6c\013\uff6c\014\uff6c" +
    "\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c\024" +
    "\uff6c\025\uff6c\026\uff6c\030\uff6c\031\uff6c\032\uff6c\040\uff6c" +
    "\042\uff6c\043\uff6c\061\uff6c\070\uff6c\073\uff6c\074\uff6c\075" +
    "\uff6c\076\uff6c\113\uff6c\001\002\000\006\065\uff6b\070\uff6b" +
    "\001\002\000\004\070\151\001\002\000\004\065\152\001" +
    "\002\000\070\006\uffaf\010\uffaf\011\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\030\uffaf\031\uffaf\032\uffaf\040\uffaf" +
    "\042\uffaf\043\uffaf\061\uffaf\070\uffaf\073\uffaf\074\uffaf\075" +
    "\uffaf\076\uffaf\113\uffaf\001\002\000\004\070\175\001\002" +
    "\000\004\065\174\001\002\000\004\065\173\001\002\000" +
    "\010\005\160\071\161\077\157\001\002\000\004\065\172" +
    "\001\002\000\006\005\165\070\166\001\002\000\004\070" +
    "\162\001\002\000\004\071\163\001\002\000\004\065\164" +
    "\001\002\000\070\006\uffab\010\uffab\011\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\024\uffab\025\uffab\026\uffab\030\uffab\031\uffab\032\uffab\040" +
    "\uffab\042\uffab\043\uffab\061\uffab\070\uffab\073\uffab\074\uffab" +
    "\075\uffab\076\uffab\113\uffab\001\002\000\004\065\171\001" +
    "\002\000\004\005\167\001\002\000\004\065\170\001\002" +
    "\000\070\006\uffac\010\uffac\011\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\024\uffac" +
    "\025\uffac\026\uffac\030\uffac\031\uffac\032\uffac\040\uffac\042" +
    "\uffac\043\uffac\061\uffac\070\uffac\073\uffac\074\uffac\075\uffac" +
    "\076\uffac\113\uffac\001\002\000\070\006\uffad\010\uffad\011" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\024\uffad\025\uffad\026\uffad\030\uffad\031" +
    "\uffad\032\uffad\040\uffad\042\uffad\043\uffad\061\uffad\070\uffad" +
    "\073\uffad\074\uffad\075\uffad\076\uffad\113\uffad\001\002\000" +
    "\070\006\uffae\010\uffae\011\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\024\uffae\025" +
    "\uffae\026\uffae\030\uffae\031\uffae\032\uffae\040\uffae\042\uffae" +
    "\043\uffae\061\uffae\070\uffae\073\uffae\074\uffae\075\uffae\076" +
    "\uffae\113\uffae\001\002\000\070\006\uffc6\010\uffc6\011\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\040\uffc6\042\uffc6\043\uffc6\061\uffc6\070\uffc6\073" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\113\uffc6\001\002\000\070" +
    "\006\uffaa\010\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\030\uffaa\031\uffaa\032\uffaa\040\uffaa\042\uffaa\043" +
    "\uffaa\061\uffaa\070\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa" +
    "\113\uffaa\001\002\000\004\044\176\001\002\000\010\005" +
    "\200\071\201\077\177\001\002\000\006\065\210\066\211" +
    "\001\002\000\004\070\205\001\002\000\004\070\202\001" +
    "\002\000\004\071\203\001\002\000\004\065\204\001\002" +
    "\000\070\006\uffa7\010\uffa7\011\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\030\uffa7\031\uffa7\032\uffa7\040\uffa7\042" +
    "\uffa7\043\uffa7\061\uffa7\070\uffa7\073\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\113\uffa7\001\002\000\004\005\206\001\002\000" +
    "\004\065\207\001\002\000\070\006\uffa6\010\uffa6\011\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\024\uffa6\025\uffa6\026\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\040\uffa6\042\uffa6\043\uffa6\061\uffa6\070\uffa6\073" +
    "\uffa6\074\uffa6\075\uffa6\076\uffa6\113\uffa6\001\002\000\070" +
    "\006\uffa9\010\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\030\uffa9\031\uffa9\032\uffa9\040\uffa9\042\uffa9\043" +
    "\uffa9\061\uffa9\070\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9" +
    "\113\uffa9\001\002\000\004\077\212\001\002\000\004\065" +
    "\213\001\002\000\070\006\uffa8\010\uffa8\011\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\040\uffa8\042\uffa8\043\uffa8\061\uffa8\070\uffa8\073\uffa8\074" +
    "\uffa8\075\uffa8\076\uffa8\113\uffa8\001\002\000\004\007\215" +
    "\001\002\000\004\005\216\001\002\000\004\067\217\001" +
    "\002\000\004\072\220\001\002\000\004\057\221\001\002" +
    "\000\004\065\222\001\002\000\070\006\uff5f\010\uff5f\011" +
    "\uff5f\013\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f" +
    "\021\uff5f\022\uff5f\024\uff5f\025\uff5f\026\uff5f\030\uff5f\031" +
    "\uff5f\032\uff5f\040\uff5f\042\uff5f\043\uff5f\061\uff5f\070\uff5f" +
    "\073\uff5f\074\uff5f\075\uff5f\076\uff5f\113\uff5f\001\002\000" +
    "\006\044\225\065\224\001\002\000\070\006\uffc9\010\uffc9" +
    "\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\040\uffc9\042\uffc9\043\uffc9\061\uffc9\070" +
    "\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\113\uffc9\001\002" +
    "\000\004\077\226\001\002\000\006\065\227\066\230\001" +
    "\002\000\070\006\uffba\010\uffba\011\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\024" +
    "\uffba\025\uffba\026\uffba\030\uffba\031\uffba\032\uffba\040\uffba" +
    "\042\uffba\043\uffba\061\uffba\070\uffba\073\uffba\074\uffba\075" +
    "\uffba\076\uffba\113\uffba\001\002\000\004\077\231\001\002" +
    "\000\004\065\232\001\002\000\070\006\uffb9\010\uffb9\011" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\024\uffb9\025\uffb9\026\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\040\uffb9\042\uffb9\043\uffb9\061\uffb9\070\uffb9" +
    "\073\uffb9\074\uffb9\075\uffb9\076\uffb9\113\uffb9\001\002\000" +
    "\070\006\uffde\010\uffde\011\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\024\uffde\025" +
    "\uffde\026\uffde\030\uffde\031\uffde\032\uffde\040\uffde\042\uffde" +
    "\043\uffde\061\uffde\070\uffde\073\uffde\074\uffde\075\uffde\076" +
    "\uffde\113\uffde\001\002\000\062\006\037\010\050\011\036" +
    "\013\060\014\044\015\052\016\046\017\034\020\075\021" +
    "\051\022\057\024\065\025\035\030\043\031\072\032\063" +
    "\042\055\043\074\070\071\073\054\074\066\075\073\076" +
    "\042\113\031\001\002\000\064\006\037\010\050\011\036" +
    "\013\060\014\044\015\052\016\046\017\034\020\075\021" +
    "\051\022\057\024\065\025\035\030\043\031\072\032\250" +
    "\042\055\043\074\061\240\070\071\073\054\074\066\075" +
    "\073\076\042\113\031\001\002\000\070\006\uffeb\010\uffeb" +
    "\011\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\040\uffeb\042\uffeb\043\uffeb\061\uffeb\070" +
    "\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\113\uffeb\001\002" +
    "\000\070\006\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\040\uffd7\042" +
    "\uffd7\043\uffd7\061\uffd7\070\uffd7\073\uffd7\074\uffd7\075\uffd7" +
    "\076\uffd7\113\uffd7\001\002\000\004\014\262\001\002\000" +
    "\070\006\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\040\uffe7\042\uffe7" +
    "\043\uffe7\061\uffe7\070\uffe7\073\uffe7\074\uffe7\075\uffe7\076" +
    "\uffe7\113\uffe7\001\002\000\070\006\uffe3\010\uffe3\011\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\040\uffe3\042\uffe3\043\uffe3\061\uffe3\070\uffe3\073" +
    "\uffe3\074\uffe3\075\uffe3\076\uffe3\113\uffe3\001\002\000\072" +
    "\006\uffed\010\uffed\011\uffed\012\256\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\024\uffed" +
    "\025\uffed\026\uffed\030\uffed\031\uffed\032\uffed\040\uffed\042" +
    "\uffed\043\uffed\061\uffed\070\uffed\073\uffed\074\uffed\075\uffed" +
    "\076\uffed\113\uffed\001\002\000\070\006\uffd5\010\uffd5\011" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\040\uffd5\042\uffd5\043\uffd5\061\uffd5\070\uffd5" +
    "\073\uffd5\074\uffd5\075\uffd5\076\uffd5\113\uffd5\001\002\000" +
    "\070\006\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb\040\uffdb\042\uffdb" +
    "\043\uffdb\061\uffdb\070\uffdb\073\uffdb\074\uffdb\075\uffdb\076" +
    "\uffdb\113\uffdb\001\002\000\070\006\uffd9\010\uffd9\011\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\040\uffd9\042\uffd9\043\uffd9\061\uffd9\070\uffd9\073" +
    "\uffd9\074\uffd9\075\uffd9\076\uffd9\113\uffd9\001\002\000\070" +
    "\006\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\030\uffe1\031\uffe1\032\uffe1\040\uffe1\042\uffe1\043" +
    "\uffe1\061\uffe1\070\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\113\uffe1\001\002\000\004\065\255\001\002\000\070\006" +
    "\uffef\010\uffef\011\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\024\uffef\025\uffef\026" +
    "\uffef\030\uffef\031\uffef\032\uffef\040\uffef\042\uffef\043\uffef" +
    "\061\uffef\070\uffef\073\uffef\074\uffef\075\uffef\076\uffef\113" +
    "\uffef\001\002\000\070\006\uffdd\010\uffdd\011\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\040\uffdd\042\uffdd\043\uffdd\061\uffdd\070\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\076\uffdd\113\uffdd\001\002\000\070\006\uffe9" +
    "\010\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\040\uffe9\042\uffe9\043\uffe9\061" +
    "\uffe9\070\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\113\uffe9" +
    "\001\002\000\070\006\uffe5\010\uffe5\011\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\040" +
    "\uffe5\042\uffe5\043\uffe5\061\uffe5\070\uffe5\073\uffe5\074\uffe5" +
    "\075\uffe5\076\uffe5\113\uffe5\001\002\000\070\006\uffdf\010" +
    "\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\040\uffdf\042\uffdf\043\uffdf\061\uffdf" +
    "\070\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\113\uffdf\001" +
    "\002\000\004\060\257\001\002\000\062\006\037\010\050" +
    "\011\036\013\060\014\044\015\052\016\046\017\034\020" +
    "\075\021\051\022\057\024\065\025\035\030\043\031\072" +
    "\032\063\042\055\043\074\070\071\073\054\074\066\075" +
    "\073\076\042\113\031\001\002\000\064\006\037\010\050" +
    "\011\036\013\060\014\044\015\052\016\046\017\034\020" +
    "\075\021\051\022\057\024\065\025\035\030\043\031\072" +
    "\032\250\042\055\043\074\061\261\070\071\073\054\074" +
    "\066\075\073\076\042\113\031\001\002\000\070\006\uffa5" +
    "\010\uffa5\011\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\030\uffa5\031\uffa5\032\uffa5\040\uffa5\042\uffa5\043\uffa5\061" +
    "\uffa5\070\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\113\uffa5" +
    "\001\002\000\004\056\263\001\002\000\006\055\265\070" +
    "\266\001\002\000\004\057\305\001\002\000\006\057\uffa2" +
    "\065\uffa2\001\002\000\014\052\271\057\uffa3\065\uffa3\104" +
    "\267\105\270\001\002\000\006\070\304\077\303\001\002" +
    "\000\006\070\302\077\301\001\002\000\012\005\273\055" +
    "\274\070\275\077\272\001\002\000\006\057\uff9c\065\uff9c" +
    "\001\002\000\006\005\276\070\277\001\002\000\006\057" +
    "\uffa1\065\uffa1\001\002\000\006\057\uff9b\065\uff9b\001\002" +
    "\000\006\057\uff9a\065\uff9a\001\002\000\004\005\300\001" +
    "\002\000\006\057\uff99\065\uff99\001\002\000\006\057\uffa0" +
    "\065\uffa0\001\002\000\006\057\uff9e\065\uff9e\001\002\000" +
    "\006\057\uff9f\065\uff9f\001\002\000\006\057\uff9d\065\uff9d" +
    "\001\002\000\004\065\306\001\002\000\070\006\uff97\010" +
    "\uff97\011\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\024\uff97\025\uff97\026\uff97\030" +
    "\uff97\031\uff97\032\uff97\040\uff97\042\uff97\043\uff97\061\uff97" +
    "\070\uff97\073\uff97\074\uff97\075\uff97\076\uff97\113\uff97\001" +
    "\002\000\006\044\311\065\310\001\002\000\070\006\uffd0" +
    "\010\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\040\uffd0\042\uffd0\043\uffd0\061" +
    "\uffd0\070\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\113\uffd0" +
    "\001\002\000\004\071\312\001\002\000\004\070\313\001" +
    "\002\000\004\071\314\001\002\000\004\065\315\001\002" +
    "\000\070\006\uffc4\010\uffc4\011\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4\040\uffc4\042" +
    "\uffc4\043\uffc4\061\uffc4\070\uffc4\073\uffc4\074\uffc4\075\uffc4" +
    "\076\uffc4\113\uffc4\001\002\000\004\070\317\001\002\000" +
    "\004\057\320\001\002\000\004\060\321\001\002\000\004" +
    "\027\322\001\002\000\004\077\334\001\002\000\006\027" +
    "\322\033\325\001\002\000\006\027\uff7a\033\uff7a\001\002" +
    "\000\004\106\327\001\002\000\006\027\uff7b\033\uff7b\001" +
    "\002\000\062\006\037\010\050\011\036\013\060\014\044" +
    "\015\052\016\046\017\034\020\075\021\051\022\057\024" +
    "\065\025\035\030\043\031\072\032\063\042\055\043\074" +
    "\070\071\073\054\074\066\075\073\076\042\113\031\001" +
    "\002\000\064\006\037\010\050\011\036\013\060\014\044" +
    "\015\052\016\046\017\034\020\075\021\051\022\057\024" +
    "\065\025\035\026\331\030\043\031\072\032\250\042\055" +
    "\043\074\070\071\073\054\074\066\075\073\076\042\113" +
    "\031\001\002\000\004\065\332\001\002\000\004\061\333" +
    "\001\002\000\070\006\uff7c\010\uff7c\011\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c" +
    "\024\uff7c\025\uff7c\026\uff7c\030\uff7c\031\uff7c\032\uff7c\040" +
    "\uff7c\042\uff7c\043\uff7c\061\uff7c\070\uff7c\073\uff7c\074\uff7c" +
    "\075\uff7c\076\uff7c\113\uff7c\001\002\000\004\106\335\001" +
    "\002\000\062\006\037\010\050\011\036\013\060\014\044" +
    "\015\052\016\046\017\034\020\075\021\051\022\057\024" +
    "\065\025\035\030\043\031\072\032\063\042\055\043\074" +
    "\070\071\073\054\074\066\075\073\076\042\113\031\001" +
    "\002\000\064\006\037\010\050\011\036\013\060\014\044" +
    "\015\052\016\046\017\034\020\075\021\051\022\057\024" +
    "\065\025\035\026\337\030\043\031\072\032\250\042\055" +
    "\043\074\070\071\073\054\074\066\075\073\076\042\113" +
    "\031\001\002\000\004\065\340\001\002\000\006\027\uff79" +
    "\033\uff79\001\002\000\004\070\353\001\002\000\010\005" +
    "\341\057\350\070\343\001\002\000\014\005\uff62\057\uff62" +
    "\066\346\067\345\070\uff62\001\002\000\010\005\uff65\057" +
    "\uff65\070\uff65\001\002\000\010\005\uff64\057\uff64\070\uff64" +
    "\001\002\000\004\070\347\001\002\000\010\005\uff60\057" +
    "\uff60\070\uff60\001\002\000\004\065\352\001\002\000\010" +
    "\005\uff66\057\uff66\070\uff66\001\002\000\070\006\uff67\010" +
    "\uff67\011\uff67\013\uff67\014\uff67\015\uff67\016\uff67\017\uff67" +
    "\020\uff67\021\uff67\022\uff67\024\uff67\025\uff67\026\uff67\030" +
    "\uff67\031\uff67\032\uff67\040\uff67\042\uff67\043\uff67\061\uff67" +
    "\070\uff67\073\uff67\074\uff67\075\uff67\076\uff67\113\uff67\001" +
    "\002\000\004\007\354\001\002\000\004\005\355\001\002" +
    "\000\012\005\uff61\057\uff61\067\356\070\uff61\001\002\000" +
    "\010\005\uff63\057\uff63\070\uff63\001\002\000\022\006\364" +
    "\016\365\017\370\021\361\024\360\025\363\030\366\070" +
    "\367\001\002\000\004\070\u0133\001\002\000\004\070\u012c" +
    "\001\002\000\004\057\u0128\001\002\000\004\070\u0121\001" +
    "\002\000\004\070\u011a\001\002\000\004\070\u0113\001\002" +
    "\000\004\070\u010c\001\002\000\004\044\u0106\001\002\000" +
    "\004\070\371\001\002\000\004\044\372\001\002\000\004" +
    "\077\373\001\002\000\004\065\374\001\002\000\006\055" +
    "\265\070\266\001\002\000\004\065\376\001\002\000\006" +
    "\054\u0100\070\u0101\001\002\000\004\057\uff5c\001\002\000" +
    "\004\070\u0105\001\002\000\006\053\u0102\054\u0103\001\002" +
    "\000\004\077\u0104\001\002\000\004\057\uff54\001\002\000" +
    "\004\057\uff55\001\002\000\004\057\uff53\001\002\000\004" +
    "\077\u0107\001\002\000\004\065\u0108\001\002\000\006\055" +
    "\265\070\266\001\002\000\004\065\u010a\001\002\000\006" +
    "\054\u0100\070\u0101\001\002\000\004\057\uff56\001\002\000" +
    "\004\044\u010d\001\002\000\004\077\u010e\001\002\000\004" +
    "\065\u010f\001\002\000\006\055\265\070\266\001\002\000" +
    "\004\065\u0111\001\002\000\006\054\u0100\070\u0101\001\002" +
    "\000\004\057\uff5b\001\002\000\004\044\u0114\001\002\000" +
    "\004\077\u0115\001\002\000\004\065\u0116\001\002\000\006" +
    "\055\265\070\266\001\002\000\004\065\u0118\001\002\000" +
    "\006\054\u0100\070\u0101\001\002\000\004\057\uff5d\001\002" +
    "\000\004\044\u011b\001\002\000\004\077\u011c\001\002\000" +
    "\004\065\u011d\001\002\000\006\055\265\070\266\001\002" +
    "\000\004\065\u011f\001\002\000\006\054\u0100\070\u0101\001" +
    "\002\000\004\057\uff57\001\002\000\004\044\u0122\001\002" +
    "\000\004\077\u0123\001\002\000\004\065\u0124\001\002\000" +
    "\006\055\265\070\266\001\002\000\004\065\u0126\001\002" +
    "\000\006\054\u0100\070\u0101\001\002\000\004\057\uff5a\001" +
    "\002\000\004\060\u0129\001\002\000\062\006\037\010\050" +
    "\011\036\013\060\014\044\015\052\016\046\017\034\020" +
    "\075\021\051\022\057\024\065\025\035\030\043\031\072" +
    "\032\063\042\055\043\074\070\071\073\054\074\066\075" +
    "\073\076\042\113\031\001\002\000\064\006\037\010\050" +
    "\011\036\013\060\014\044\015\052\016\046\017\034\020" +
    "\075\021\051\022\057\024\065\025\035\030\043\031\072" +
    "\032\250\042\055\043\074\061\u012b\070\071\073\054\074" +
    "\066\075\073\076\042\113\031\001\002\000\070\006\uff96" +
    "\010\uff96\011\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\024\uff96\025\uff96\026\uff96" +
    "\030\uff96\031\uff96\032\uff96\040\uff96\042\uff96\043\uff96\061" +
    "\uff96\070\uff96\073\uff96\074\uff96\075\uff96\076\uff96\113\uff96" +
    "\001\002\000\004\044\u012d\001\002\000\004\077\u012e\001" +
    "\002\000\004\065\u012f\001\002\000\006\055\265\070\266" +
    "\001\002\000\004\065\u0131\001\002\000\006\054\u0100\070" +
    "\u0101\001\002\000\004\057\uff58\001\002\000\004\044\u0134" +
    "\001\002\000\004\077\u0135\001\002\000\004\065\u0136\001" +
    "\002\000\006\055\265\070\266\001\002\000\004\065\u0138" +
    "\001\002\000\006\054\u0100\070\u0101\001\002\000\004\057" +
    "\uff59\001\002\000\006\044\u013c\065\u013b\001\002\000\070" +
    "\006\uffce\010\uffce\011\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce\025\uffce" +
    "\026\uffce\030\uffce\031\uffce\032\uffce\040\uffce\042\uffce\043" +
    "\uffce\061\uffce\070\uffce\073\uffce\074\uffce\075\uffce\076\uffce" +
    "\113\uffce\001\002\000\004\077\u013d\001\002\000\006\065" +
    "\u013e\066\u013f\001\002\000\070\006\uffc1\010\uffc1\011\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\040\uffc1\042\uffc1\043\uffc1\061\uffc1\070\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\076\uffc1\113\uffc1\001\002\000\004" +
    "\077\u0140\001\002\000\004\065\u0141\001\002\000\070\006" +
    "\uffc0\010\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\040\uffc0\042\uffc0\043\uffc0" +
    "\061\uffc0\070\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\113" +
    "\uffc0\001\002\000\010\044\u0145\053\u0143\065\u0144\001\002" +
    "\000\004\005\u014c\001\002\000\070\006\uffcc\010\uffcc\011" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\040\uffcc\042\uffcc\043\uffcc\061\uffcc\070\uffcc" +
    "\073\uffcc\074\uffcc\075\uffcc\076\uffcc\113\uffcc\001\002\000" +
    "\004\005\u0146\001\002\000\006\005\u0147\070\u0148\001\002" +
    "\000\004\065\u014b\001\002\000\004\005\u0149\001\002\000" +
    "\004\065\u014a\001\002\000\070\006\uffb0\010\uffb0\011\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\040\uffb0\042\uffb0\043\uffb0\061\uffb0\070\uffb0\073" +
    "\uffb0\074\uffb0\075\uffb0\076\uffb0\113\uffb0\001\002\000\070" +
    "\006\uffb2\010\uffb2\011\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\030\uffb2\031\uffb2\032\uffb2\040\uffb2\042\uffb2\043" +
    "\uffb2\061\uffb2\070\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\113\uffb2\001\002\000\006\005\u014d\070\u014e\001\002\000" +
    "\004\065\u0151\001\002\000\004\005\u014f\001\002\000\004" +
    "\065\u0150\001\002\000\070\006\uffb1\010\uffb1\011\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\040\uffb1\042\uffb1\043\uffb1\061\uffb1\070\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\113\uffb1\001\002\000\070\006" +
    "\uffb3\010\uffb3\011\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\040\uffb3\042\uffb3\043\uffb3" +
    "\061\uffb3\070\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\113" +
    "\uffb3\001\002\000\006\044\u0154\065\u0153\001\002\000\070" +
    "\006\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\030\uffd1\031\uffd1\032\uffd1\040\uffd1\042\uffd1\043" +
    "\uffd1\061\uffd1\070\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1" +
    "\113\uffd1\001\002\000\004\077\u0155\001\002\000\004\065" +
    "\u0156\001\002\000\070\006\uffc5\010\uffc5\011\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\040\uffc5\042\uffc5\043\uffc5\061\uffc5\070\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\113\uffc5\001\002\000\006\055\265" +
    "\070\266\001\002\000\004\057\u0159\001\002\000\004\060" +
    "\u015a\001\002\000\062\006\037\010\050\011\036\013\060" +
    "\014\044\015\052\016\046\017\034\020\075\021\051\022" +
    "\057\024\065\025\035\030\043\031\072\032\063\042\055" +
    "\043\074\070\071\073\054\074\066\075\073\076\042\113" +
    "\031\001\002\000\064\006\037\010\050\011\036\013\060" +
    "\014\044\015\052\016\046\017\034\020\075\021\051\022" +
    "\057\024\065\025\035\030\043\031\072\032\250\042\055" +
    "\043\074\061\u015c\070\071\073\054\074\066\075\073\076" +
    "\042\113\031\001\002\000\070\006\uff98\010\uff98\011\uff98" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\024\uff98\025\uff98\026\uff98\030\uff98\031\uff98" +
    "\032\uff98\040\uff98\042\uff98\043\uff98\061\uff98\070\uff98\073" +
    "\uff98\074\uff98\075\uff98\076\uff98\113\uff98\001\002\000\006" +
    "\044\u015f\065\u015e\001\002\000\070\006\uffcd\010\uffcd\011" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\040\uffcd\042\uffcd\043\uffcd\061\uffcd\070\uffcd" +
    "\073\uffcd\074\uffcd\075\uffcd\076\uffcd\113\uffcd\001\002\000" +
    "\004\077\u0160\001\002\000\006\065\u0161\066\u0162\001\002" +
    "\000\070\006\uffbf\010\uffbf\011\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\040\uffbf\042" +
    "\uffbf\043\uffbf\061\uffbf\070\uffbf\073\uffbf\074\uffbf\075\uffbf" +
    "\076\uffbf\113\uffbf\001\002\000\004\077\u0163\001\002\000" +
    "\004\065\u0164\001\002\000\070\006\uffbe\010\uffbe\011\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\024\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\040\uffbe\042\uffbe\043\uffbe\061\uffbe\070\uffbe\073" +
    "\uffbe\074\uffbe\075\uffbe\076\uffbe\113\uffbe\001\002\000\010" +
    "\005\uff71\065\uff71\070\uff71\001\002\000\004\070\u016c\001" +
    "\002\000\010\005\u0166\065\u016b\070\u0168\001\002\000\012" +
    "\005\uff6e\065\uff6e\070\uff6e\107\u0169\001\002\000\010\005" +
    "\uff70\065\uff70\070\uff70\001\002\000\010\005\uff72\065\uff72" +
    "\070\uff72\001\002\000\070\006\uff73\010\uff73\011\uff73\013" +
    "\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021\uff73" +
    "\022\uff73\024\uff73\025\uff73\026\uff73\030\uff73\031\uff73\032" +
    "\uff73\040\uff73\042\uff73\043\uff73\061\uff73\070\uff73\073\uff73" +
    "\074\uff73\075\uff73\076\uff73\113\uff73\001\002\000\004\005" +
    "\u016d\001\002\000\012\005\uff6d\065\uff6d\070\uff6d\107\u016e" +
    "\001\002\000\010\005\uff6f\065\uff6f\070\uff6f\001\002\000" +
    "\006\070\u0171\077\u0170\001\002\000\004\065\u0174\001\002" +
    "\000\004\065\u0172\001\002\000\004\061\u0173\001\002\000" +
    "\004\002\ufffd\001\002\000\004\061\u0175\001\002\000\004" +
    "\002\uffff\001\002\000\004\070\u0187\001\002\000\012\044" +
    "\u017b\053\u0178\054\u017a\065\u0179\001\002\000\004\077\u0182" +
    "\001\002\000\070\006\uffc8\010\uffc8\011\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8\040" +
    "\uffc8\042\uffc8\043\uffc8\061\uffc8\070\uffc8\073\uffc8\074\uffc8" +
    "\075\uffc8\076\uffc8\113\uffc8\001\002\000\004\065\u0181\001" +
    "\002\000\004\077\u017c\001\002\000\006\065\u017d\066\u017e" +
    "\001\002\000\070\006\uffb7\010\uffb7\011\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7\032\uffb7\040" +
    "\uffb7\042\uffb7\043\uffb7\061\uffb7\070\uffb7\073\uffb7\074\uffb7" +
    "\075\uffb7\076\uffb7\113\uffb7\001\002\000\004\077\u017f\001" +
    "\002\000\004\065\u0180\001\002\000\070\006\uffb6\010\uffb6" +
    "\011\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\040\uffb6\042\uffb6\043\uffb6\061\uffb6\070" +
    "\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\113\uffb6\001\002" +
    "\000\070\006\uffb5\010\uffb5\011\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\040\uffb5\042" +
    "\uffb5\043\uffb5\061\uffb5\070\uffb5\073\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\113\uffb5\001\002\000\006\065\u0183\066\u0184\001" +
    "\002\000\070\006\uffc7\010\uffc7\011\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\040\uffc7" +
    "\042\uffc7\043\uffc7\061\uffc7\070\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\076\uffc7\113\uffc7\001\002\000\004\077\u0185\001\002" +
    "\000\004\065\u0186\001\002\000\070\006\uffb8\010\uffb8\011" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\040\uffb8\042\uffb8\043\uffb8\061\uffb8\070\uffb8" +
    "\073\uffb8\074\uffb8\075\uffb8\076\uffb8\113\uffb8\001\002\000" +
    "\004\065\u0188\001\002\000\070\006\uffb4\010\uffb4\011\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\040\uffb4\042\uffb4\043\uffb4\061\uffb4\070\uffb4\073" +
    "\uffb4\074\uffb4\075\uffb4\076\uffb4\113\uffb4\001\002\000\006" +
    "\055\265\070\266\001\002\000\004\057\u018b\001\002\000" +
    "\004\060\u018c\001\002\000\062\006\037\010\050\011\036" +
    "\013\060\014\044\015\052\016\046\017\034\020\075\021" +
    "\051\022\057\024\065\025\035\030\043\031\072\032\063" +
    "\042\055\043\074\070\071\073\054\074\066\075\073\076" +
    "\042\113\031\001\002\000\064\006\037\010\050\011\036" +
    "\013\060\014\044\015\052\016\046\017\034\020\075\021" +
    "\051\022\057\024\065\025\035\030\043\031\072\032\250" +
    "\042\055\043\074\061\u018e\070\071\073\054\074\066\075" +
    "\073\076\042\113\031\001\002\000\072\006\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\040\uffa4\042\uffa4\043\uffa4\061" +
    "\uffa4\070\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\113\uffa4" +
    "\001\002\000\006\044\u0191\065\u0190\001\002\000\070\006" +
    "\uffca\010\uffca\011\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\024\uffca\025\uffca\026" +
    "\uffca\030\uffca\031\uffca\032\uffca\040\uffca\042\uffca\043\uffca" +
    "\061\uffca\070\uffca\073\uffca\074\uffca\075\uffca\076\uffca\113" +
    "\uffca\001\002\000\004\077\u0192\001\002\000\006\065\u0193" +
    "\066\u0194\001\002\000\070\006\uffbc\010\uffbc\011\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\024\uffbc\025\uffbc\026\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\040\uffbc\042\uffbc\043\uffbc\061\uffbc\070\uffbc\073\uffbc" +
    "\074\uffbc\075\uffbc\076\uffbc\113\uffbc\001\002\000\004\077" +
    "\u0195\001\002\000\004\065\u0196\001\002\000\070\006\uffbb" +
    "\010\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\040\uffbb\042\uffbb\043\uffbb\061" +
    "\uffbb\070\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\113\uffbb" +
    "\001\002\000\006\044\u0199\065\u0198\001\002\000\070\006" +
    "\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\040\uffcf\042\uffcf\043\uffcf" +
    "\061\uffcf\070\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\113" +
    "\uffcf\001\002\000\004\077\u019a\001\002\000\006\065\u019b" +
    "\066\u019c\001\002\000\070\006\uffc3\010\uffc3\011\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\040\uffc3\042\uffc3\043\uffc3\061\uffc3\070\uffc3\073\uffc3" +
    "\074\uffc3\075\uffc3\076\uffc3\113\uffc3\001\002\000\004\077" +
    "\u019d\001\002\000\004\065\u019e\001\002\000\070\006\uffc2" +
    "\010\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\040\uffc2\042\uffc2\043\uffc2\061" +
    "\uffc2\070\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\113\uffc2" +
    "\001\002\000\004\005\u01a0\001\002\000\004\070\u01a1\001" +
    "\002\000\004\005\u01a2\001\002\000\004\057\u01a3\001\002" +
    "\000\004\065\u01a4\001\002\000\070\006\uff5e\010\uff5e\011" +
    "\uff5e\013\uff5e\014\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e" +
    "\021\uff5e\022\uff5e\024\uff5e\025\uff5e\026\uff5e\030\uff5e\031" +
    "\uff5e\032\uff5e\040\uff5e\042\uff5e\043\uff5e\061\uff5e\070\uff5e" +
    "\073\uff5e\074\uff5e\075\uff5e\076\uff5e\113\uff5e\001\002\000" +
    "\004\056\u01a6\001\002\000\004\057\u01a7\001\002\000\004" +
    "\060\u01a8\001\002\000\062\006\037\010\050\011\036\013" +
    "\060\014\044\015\052\016\046\017\034\020\075\021\051" +
    "\022\057\024\065\025\035\030\043\031\072\032\063\042" +
    "\055\043\074\070\071\073\054\074\066\075\073\076\042" +
    "\113\031\001\002\000\064\006\037\010\050\011\036\013" +
    "\060\014\044\015\052\016\046\017\034\020\075\021\051" +
    "\022\057\024\065\025\035\030\043\031\072\032\250\040" +
    "\u01aa\042\055\043\074\070\071\073\054\074\066\075\073" +
    "\076\042\113\031\001\002\000\006\070\u01ac\077\u01ab\001" +
    "\002\000\004\065\u01af\001\002\000\004\065\u01ad\001\002" +
    "\000\004\061\u01ae\001\002\000\004\002\ufffe\001\002\000" +
    "\004\061\u01b0\001\002\000\004\002\000\001\002\000\004" +
    "\060\u01b2\001\002\000\032\006\037\010\050\016\046\017" +
    "\034\020\075\021\051\022\057\024\065\025\035\030\043" +
    "\031\072\070\071\001\002\000\034\006\037\010\050\016" +
    "\046\017\034\020\075\021\051\022\057\024\065\025\035" +
    "\030\043\031\072\061\u01b6\070\071\001\002\000\034\006" +
    "\uffd2\010\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\024\uffd2\025\uffd2\030\uffd2\031\uffd2\061\uffd2\070\uffd2\001" +
    "\002\000\034\006\uffd3\010\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\024\uffd3\025\uffd3\030\uffd3\031\uffd3\061" +
    "\uffd3\070\uffd3\001\002\000\004\065\u01b7\001\002\000\014" +
    "\016\uff78\031\uff78\064\uff78\101\uff78\111\uff78\001\002\000" +
    "\004\070\u01c6\001\002\000\006\005\u01ba\104\u01bb\001\002" +
    "\000\004\070\u01c1\001\002\000\004\070\u01bc\001\002\000" +
    "\006\066\u01be\105\u01bd\001\002\000\014\016\ufff2\031\ufff2" +
    "\064\ufff2\101\ufff2\111\ufff2\001\002\000\004\070\u01bf\001" +
    "\002\000\004\105\u01c0\001\002\000\014\016\ufff3\031\ufff3" +
    "\064\ufff3\101\ufff3\111\ufff3\001\002\000\006\005\u01c2\066" +
    "\u01c3\001\002\000\014\016\ufff0\031\ufff0\064\ufff0\101\ufff0" +
    "\111\ufff0\001\002\000\004\070\u01c4\001\002\000\004\005" +
    "\u01c5\001\002\000\014\016\ufff1\031\ufff1\064\ufff1\101\ufff1" +
    "\111\ufff1\001\002\000\010\005\u01c8\071\u01c9\077\u01c7\001" +
    "\002\000\016\016\uff77\031\uff77\064\uff77\066\u01ce\101\uff77" +
    "\111\uff77\001\002\000\004\070\u01cc\001\002\000\004\070" +
    "\u01ca\001\002\000\004\071\u01cb\001\002\000\014\016\uff74" +
    "\031\uff74\064\uff74\101\uff74\111\uff74\001\002\000\004\005" +
    "\u01cd\001\002\000\014\016\uff75\031\uff75\064\uff75\101\uff75" +
    "\111\uff75\001\002\000\004\077\u01cf\001\002\000\014\016" +
    "\uff76\031\uff76\064\uff76\101\uff76\111\uff76\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ce\000\016\002\005\006\013\007\003\020\004\042" +
    "\010\046\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\024\007\017\020\020\046\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\037\004\063\010\046\011\031\014" +
    "\075\021\061\022\060\023\032\024\055\025\066\031\067" +
    "\032\040\035\044\047\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\250\010\242\011\235\014\253\021\246\022\245\023\236" +
    "\024\244\025\251\031\252\032\240\035\241\047\243\001" +
    "\001\000\002\001\001\000\006\026\u0166\043\u0164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\341\045\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\141" +
    "\030\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\234\004\063\010\046\011\031\014\075\021" +
    "\061\022\060\023\032\024\055\025\066\031\067\032\040" +
    "\035\044\047\052\001\001\000\034\004\250\010\242\011" +
    "\235\014\253\021\246\022\245\023\236\024\244\025\251" +
    "\031\252\032\240\035\241\047\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\257\004\063\010\046\011\031\014\075\021" +
    "\061\022\060\023\032\024\055\025\066\031\067\032\040" +
    "\035\044\047\052\001\001\000\034\004\250\010\242\011" +
    "\235\014\253\021\246\022\245\023\236\024\244\025\251" +
    "\031\252\032\240\035\241\047\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\322\037\323\001\001\000\002\001\001\000\004\037\325" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\327\004\063\010\046\011\031\014\075" +
    "\021\061\022\060\023\032\024\055\025\066\031\067\032" +
    "\040\035\044\047\052\001\001\000\034\004\250\010\242" +
    "\011\235\014\253\021\246\022\245\023\236\024\244\025" +
    "\251\031\252\032\240\035\241\047\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\335\004\063\010\046\011\031\014\075" +
    "\021\061\022\060\023\032\024\055\025\066\031\067\032" +
    "\040\035\044\047\052\001\001\000\034\004\250\010\242" +
    "\011\235\014\253\021\246\022\245\023\236\024\244\025" +
    "\251\031\252\032\240\035\241\047\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\374\001\001\000\002\001\001\000\004" +
    "\005\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u0108\001\001\000\002\001\001\000\004" +
    "\005\u010a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\u010f\001\001" +
    "\000\002\001\001\000\004\005\u0111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u0116\001\001\000\002\001\001\000\004\005" +
    "\u0118\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u011d\001\001\000" +
    "\002\001\001\000\004\005\u011f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u0124\001\001\000\002\001\001\000\004\005\u0126" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\u0129\004\063\010\046\011\031\014\075\021\061\022\060" +
    "\023\032\024\055\025\066\031\067\032\040\035\044\047" +
    "\052\001\001\000\034\004\250\010\242\011\235\014\253" +
    "\021\246\022\245\023\236\024\244\025\251\031\252\032" +
    "\240\035\241\047\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\u012f\001\001\000\002\001\001\000\004\005\u0131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0136\001\001\000\002\001\001" +
    "\000\004\005\u0138\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\u0157" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\u015a\004\063\010\046\011\031\014\075\021\061\022\060" +
    "\023\032\024\055\025\066\031\067\032\040\035\044\047" +
    "\052\001\001\000\034\004\250\010\242\011\235\014\253" +
    "\021\246\022\245\023\236\024\244\025\251\031\252\032" +
    "\240\035\241\047\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u0169\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\u0189\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\u018c\004" +
    "\063\010\046\011\031\014\075\021\061\022\060\023\032" +
    "\024\055\025\066\031\067\032\040\035\044\047\052\001" +
    "\001\000\034\004\250\010\242\011\235\014\253\021\246" +
    "\022\245\023\236\024\244\025\251\031\252\032\240\035" +
    "\241\047\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\u01a8\004\063\010\046" +
    "\011\031\014\075\021\061\022\060\023\032\024\055\025" +
    "\066\031\067\032\040\035\044\047\052\001\001\000\034" +
    "\004\250\010\242\011\235\014\253\021\246\022\245\023" +
    "\236\024\244\025\251\031\252\032\240\035\241\047\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\u01b3\041" +
    "\u01b2\001\001\000\004\004\u01b4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_FOR ::= Float Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA_FOR ::= Short Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTENCIA_FOR ::= Unsigned Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTENCIA_FOR ::= Long Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SENTENCIA_FOR ::= Double Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SYSTEM ::= System_r Parent_a Comillas Identificador Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SYSTEM",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SCANF ::= Scanf Comillas Marca_printf Comillas Coma Apuntador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // PRINTF_PARAM ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // PRINTF_PARAM ::= Comillas Identificador Marca_printf Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // PRINTF_PARAM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // PRINTF_PARAM ::= Comillas Identificador Marca_printf Comillas Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PRINTF_PARAM ::= Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PRINTF_LIST ::= PRINTF_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_LIST",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PRINTF_LIST ::= PRINTF_LIST PRINTF_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_LIST",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PRINTF ::= Printf PRINTF_LIST Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CIN_PARAM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_PARAM",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CIN_PARAM ::= Identificador Op_cin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_PARAM",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CIN_LIST ::= CIN_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_LIST",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CIN_LIST ::= CIN_LIST CIN_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_LIST",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CIN ::= Cin CIN_LIST P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // COUT_PARAM ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // COUT_PARAM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // COUT_PARAM ::= Comillas Identificador Comillas Op_cout 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // COUT_PARAM ::= Identificador Op_cout 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // COUT_LIST ::= COUT_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_LIST",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // COUT_LIST ::= COUT_LIST COUT_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_LIST",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // COUT ::= Cout COUT_LIST P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DEFINE ::= Numeral Define Identificador Comilla_simple Identificador Comilla_simple 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DEFINE ::= Numeral Define Identificador Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DEFINE ::= Numeral Define Identificador Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DEFINE ::= Numeral Define Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // STRUCT ::= Struct Identificador Llave_a DECLARACION_LIST Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("STRUCT",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA_LIST_CASE ::= SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LIST_CASE",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA_LIST_CASE ::= SENTENCIA_LIST_CASE SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LIST_CASE",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_LIST_CASE Default Dos_puntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONST ::= Const T_dato Igual Numero Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONST ::= Const Bool Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONST ::= Const Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONST ::= Const Char Identificador Igual Comilla_simple Identificador Comilla_simple P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONST ::= Const Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONST ::= Const Float Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONST ::= Const Short Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONST ::= Const Short Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONST ::= Const Unsigned Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONST ::= Const Unsigned Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONST ::= Const Long Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONST ::= Const Long Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONST ::= Const Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONST ::= Const Double Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONST ::= Const Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TYPEDEF ::= Typedef T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TYPEDEF ::= Typedef Bool Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TYPEDEF ::= Typedef Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TYPEDEF ::= Typedef Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TYPEDEF ::= Typedef Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TYPEDEF ::= Typedef Short Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TYPEDEF ::= Typedef Unsigned Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TYPEDEF ::= Typedef Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TYPEDEF ::= Typedef Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TYPEDEF ::= Typedef Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DO ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_BOOLEANA ::= Identificador Menor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_BOOLEANA ::= Identificador Mayor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_BOOLEANA ::= Identificador Menor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_BOOLEANA ::= Identificador Mayor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= Identificador Punto Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Identificador Punto Identificador Igual Comilla_simple Identificador Comilla_simple P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Identificador Punto Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Identificador Punto Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Identificador Igual Comilla_simple Identificador Comilla_simple P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Struct Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= T_dato Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= T_dato Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Short Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Short Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Unsigned Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Unsigned Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Bool Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Long Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Long Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Float Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Double Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Char Identificador Igual Comilla_simple Identificador Comilla_simple P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Short Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Unsigned Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Bool Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_LIST ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_LIST ::= DECLARACION_LIST DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SYSTEM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= SENTENCIA SYSTEM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SENTENCIA Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= TYPEDEF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA TYPEDEF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= DO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA DO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INCLUDE ::= Numeral Include Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INCLUDE ::= Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INCLUDE ::= Numeral Include Menor Identificador Mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INCLUDE ::= Numeral Include Menor Identificador Punto Identificador Mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // USING_NAMESPACE ::= Using Namespace Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("USING_NAMESPACE",36, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CABECERA ::= USING_NAMESPACE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CABECERA ::= CABECERA USING_NAMESPACE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CABECERA ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABECERA ::= CABECERA STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABECERA ::= DEFINE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CABECERA ::= CABECERA DEFINE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABECERA ::= INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABECERA ::= CABECERA INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= CABECERA Main Parent_a Parent_c Llave_a SENTENCIA Return Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CABECERA Int Main Parent_a Parent_c Llave_a SENTENCIA Return Identificador P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CABECERA Main Parent_a Parent_c Llave_a SENTENCIA Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CABECERA Int Main Parent_a Parent_c Llave_a SENTENCIA Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

