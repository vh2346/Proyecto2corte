
package Analizador;

import java_cup.runtime.Symbol;


public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\002\015\000\002\002" +
    "\014\000\002\042\004\000\002\042\003\000\002\042\004" +
    "\000\002\042\003\000\002\042\004\000\002\042\003\000" +
    "\002\006\011\000\002\006\007\000\002\006\011\000\002" +
    "\006\007\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\041\004\000\002\041\003\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\007\000\002\004\007\000\002\004\011\000\002\004" +
    "\007\000\002\004\011\000\002\004\007\000\002\004\011" +
    "\000\002\004\007\000\002\004\011\000\002\004\007\000" +
    "\002\004\007\000\002\004\011\000\002\004\007\000\002" +
    "\004\011\000\002\004\011\000\002\004\007\000\002\004" +
    "\011\000\002\004\006\000\002\004\006\000\002\004\010" +
    "\000\002\004\010\000\002\004\011\000\002\004\011\000" +
    "\002\004\006\000\002\004\005\000\002\004\010\000\002" +
    "\004\012\000\002\004\012\000\002\004\012\000\002\011" +
    "\007\000\002\010\011\000\002\033\003\000\002\033\003" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\006\000\002\033\007\000\002\031" +
    "\011\000\002\014\013\000\002\032\011\000\002\035\006" +
    "\000\002\035\006\000\002\035\006\000\002\035\006\000" +
    "\002\035\006\000\002\035\006\000\002\035\006\000\002" +
    "\035\006\000\002\035\006\000\002\035\006\000\002\040" +
    "\010\000\002\040\010\000\002\040\012\000\002\040\010" +
    "\000\002\040\012\000\002\040\010\000\002\040\012\000" +
    "\002\040\010\000\002\040\012\000\002\040\010\000\002" +
    "\040\012\000\002\040\012\000\002\040\012\000\002\040" +
    "\010\000\002\040\010\000\002\021\016\000\002\036\004" +
    "\000\002\036\003\000\002\037\010\000\002\020\010\000" +
    "\002\007\006\000\002\007\010\000\002\007\010\000\002" +
    "\007\010\000\002\025\005\000\002\026\004\000\002\026" +
    "\003\000\002\043\004\000\002\043\006\000\002\043\003" +
    "\000\002\043\005\000\002\024\005\000\002\027\004\000" +
    "\002\027\003\000\002\030\004\000\002\030\003\000\002" +
    "\022\006\000\002\044\004\000\002\044\003\000\002\045" +
    "\004\000\002\045\006\000\002\045\003\000\002\045\005" +
    "\000\002\023\006\000\002\046\004\000\002\046\003\000" +
    "\002\047\004\000\002\047\003\000\002\034\012\000\002" +
    "\034\012\000\002\034\012\000\002\034\012\000\002\034" +
    "\012\000\002\034\012\000\002\034\012\000\002\034\011" +
    "\000\002\005\005\000\002\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a7\000\006\030\004\077\010\001\002\000\004\067" +
    "\u01a3\001\002\000\012\015\ufffb\030\ufffb\063\ufffb\077\ufffb" +
    "\001\002\000\012\015\ufff9\030\ufff9\063\ufff9\077\ufff9\001" +
    "\002\000\012\015\ufffd\030\ufffd\063\ufffd\077\ufffd\001\002" +
    "\000\006\100\u018b\101\u018c\001\002\000\012\015\020\030" +
    "\004\063\017\077\010\001\002\000\004\002\013\001\002" +
    "\000\004\002\001\001\002\000\012\015\ufffa\030\ufffa\063" +
    "\ufffa\077\ufffa\001\002\000\012\015\ufffc\030\ufffc\063\ufffc" +
    "\077\ufffc\001\002\000\012\015\ufffe\030\ufffe\063\ufffe\077" +
    "\ufffe\001\002\000\004\055\u0183\001\002\000\004\063\021" +
    "\001\002\000\004\055\022\001\002\000\004\056\023\001" +
    "\002\000\004\057\024\001\002\000\060\006\032\007\043" +
    "\010\031\012\052\013\037\014\045\015\041\016\026\017" +
    "\067\020\044\021\051\023\057\024\030\027\036\030\064" +
    "\031\055\041\047\042\066\067\063\071\046\072\060\073" +
    "\065\074\035\001\002\000\066\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\023\uffef\024\uffef\025\uffef\027\uffef\030\uffef" +
    "\031\uffef\037\uffef\041\uffef\042\uffef\060\uffef\067\uffef\071" +
    "\uffef\072\uffef\073\uffef\074\uffef\001\002\000\004\067\u017b" +
    "\001\002\000\066\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb\037" +
    "\uffdb\041\uffdb\042\uffdb\060\uffdb\067\uffdb\071\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\001\002\000\004\067\u0173\001\002\000" +
    "\004\055\u016d\001\002\000\006\053\u015a\067\u015b\001\002" +
    "\000\062\006\032\007\043\010\031\012\052\013\037\014" +
    "\045\015\041\016\026\017\067\020\044\021\051\023\057" +
    "\024\030\027\036\030\064\031\230\037\u0156\041\047\042" +
    "\066\067\063\071\046\072\060\073\065\074\035\001\002" +
    "\000\066\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\027\uffeb\030\uffeb\031\uffeb\037\uffeb\041" +
    "\uffeb\042\uffeb\060\uffeb\067\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\001\002\000\006\005\u014d\067\u014f\001\002\000" +
    "\004\067\u0144\001\002\000\004\055\u013e\001\002\000\066" +
    "\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\027\uffe7\030\uffe7\031\uffe7\037\uffe7\041\uffe7\042" +
    "\uffe7\060\uffe7\067\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\001\002\000\004\067\u0139\001\002\000\070\006\ufff1\007" +
    "\ufff1\010\ufff1\011\236\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\037\ufff1\041\ufff1\042\ufff1" +
    "\060\ufff1\067\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\001" +
    "\002\000\004\067\u0129\001\002\000\004\067\u0121\001\002" +
    "\000\004\055\326\001\002\000\006\005\174\067\175\001" +
    "\002\000\004\055\276\001\002\000\066\006\uffdf\007\uffdf" +
    "\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\037\uffdf\041\uffdf\042\uffdf\060\uffdf\067" +
    "\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\001\002\000\004" +
    "\067\267\001\002\000\004\057\215\001\002\000\066\006" +
    "\uffdd\007\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\037\uffdd\041\uffdd\042\uffdd" +
    "\060\uffdd\067\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\001" +
    "\002\000\066\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\037\uffe5" +
    "\041\uffe5\042\uffe5\060\uffe5\067\uffe5\071\uffe5\072\uffe5\073" +
    "\uffe5\074\uffe5\001\002\000\004\064\214\001\002\000\066" +
    "\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\027\ufff3\030\ufff3\031\ufff3\037\ufff3\041\ufff3\042" +
    "\ufff3\060\ufff3\067\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3" +
    "\001\002\000\004\067\204\001\002\000\004\067\170\001" +
    "\002\000\066\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\027\uffe1\030\uffe1\031\uffe1\037\uffe1" +
    "\041\uffe1\042\uffe1\060\uffe1\067\uffe1\071\uffe1\072\uffe1\073" +
    "\uffe1\074\uffe1\001\002\000\066\006\uffed\007\uffed\010\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\023\uffed\024\uffed\025\uffed\027\uffed\030\uffed" +
    "\031\uffed\037\uffed\041\uffed\042\uffed\060\uffed\067\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\001\002\000\006\065\145" +
    "\067\146\001\002\000\004\067\142\001\002\000\004\067" +
    "\136\001\002\000\026\006\102\007\101\015\105\016\107" +
    "\017\106\020\076\021\103\023\077\024\100\027\104\001" +
    "\002\000\004\067\071\001\002\000\066\006\uffe9\007\uffe9" +
    "\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\037\uffe9\041\uffe9\042\uffe9\060\uffe9\067" +
    "\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\001\002\000\006" +
    "\043\073\064\072\001\002\000\066\006\uffd2\007\uffd2\010" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\037\uffd2\041\uffd2\042\uffd2\060\uffd2\067\uffd2" +
    "\071\uffd2\072\uffd2\073\uffd2\074\uffd2\001\002\000\004\054" +
    "\074\001\002\000\004\064\075\001\002\000\066\006\uffc5" +
    "\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\037\uffc5\041\uffc5\042\uffc5\060" +
    "\uffc5\067\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\001\002" +
    "\000\004\067\132\001\002\000\004\067\130\001\002\000" +
    "\004\067\126\001\002\000\004\067\124\001\002\000\004" +
    "\067\122\001\002\000\004\067\120\001\002\000\004\067" +
    "\116\001\002\000\004\067\114\001\002\000\004\067\112" +
    "\001\002\000\004\067\110\001\002\000\004\064\111\001" +
    "\002\000\066\006\uffa0\007\uffa0\010\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\027\uffa0\030\uffa0\031\uffa0\037\uffa0" +
    "\041\uffa0\042\uffa0\060\uffa0\067\uffa0\071\uffa0\072\uffa0\073" +
    "\uffa0\074\uffa0\001\002\000\004\064\113\001\002\000\066" +
    "\006\uff99\007\uff99\010\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\023\uff99\024\uff99" +
    "\025\uff99\027\uff99\030\uff99\031\uff99\037\uff99\041\uff99\042" +
    "\uff99\060\uff99\067\uff99\071\uff99\072\uff99\073\uff99\074\uff99" +
    "\001\002\000\004\064\115\001\002\000\066\006\uffa1\007" +
    "\uffa1\010\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\023\uffa1\024\uffa1\025\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\037\uffa1\041\uffa1\042\uffa1\060\uffa1" +
    "\067\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\001\002\000" +
    "\004\064\117\001\002\000\066\006\uff9f\007\uff9f\010\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\023\uff9f\024\uff9f\025\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\037\uff9f\041\uff9f\042\uff9f\060\uff9f\067\uff9f\071" +
    "\uff9f\072\uff9f\073\uff9f\074\uff9f\001\002\000\004\064\121" +
    "\001\002\000\066\006\uff9b\007\uff9b\010\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b\037" +
    "\uff9b\041\uff9b\042\uff9b\060\uff9b\067\uff9b\071\uff9b\072\uff9b" +
    "\073\uff9b\074\uff9b\001\002\000\004\064\123\001\002\000" +
    "\066\006\uff98\007\uff98\010\uff98\012\uff98\013\uff98\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\023\uff98\024" +
    "\uff98\025\uff98\027\uff98\030\uff98\031\uff98\037\uff98\041\uff98" +
    "\042\uff98\060\uff98\067\uff98\071\uff98\072\uff98\073\uff98\074" +
    "\uff98\001\002\000\004\064\125\001\002\000\066\006\uff9a" +
    "\007\uff9a\010\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\037\uff9a\041\uff9a\042\uff9a\060" +
    "\uff9a\067\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\001\002" +
    "\000\004\064\127\001\002\000\066\006\uff9e\007\uff9e\010" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\021\uff9e\023\uff9e\024\uff9e\025\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\037\uff9e\041\uff9e\042\uff9e\060\uff9e\067\uff9e" +
    "\071\uff9e\072\uff9e\073\uff9e\074\uff9e\001\002\000\004\064" +
    "\131\001\002\000\066\006\uff9d\007\uff9d\010\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\037\uff9d\041\uff9d\042\uff9d\060\uff9d\067\uff9d\071\uff9d\072" +
    "\uff9d\073\uff9d\074\uff9d\001\002\000\004\064\133\001\002" +
    "\000\066\006\uff9c\007\uff9c\010\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c\037\uff9c\041" +
    "\uff9c\042\uff9c\060\uff9c\067\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\074\uff9c\001\002\000\006\064\140\067\136\001\002\000" +
    "\006\064\uff76\067\uff76\001\002\000\010\064\uff74\067\uff74" +
    "\106\137\001\002\000\006\064\uff75\067\uff75\001\002\000" +
    "\066\006\uff78\007\uff78\010\uff78\012\uff78\013\uff78\014\uff78" +
    "\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78\023\uff78\024" +
    "\uff78\025\uff78\027\uff78\030\uff78\031\uff78\037\uff78\041\uff78" +
    "\042\uff78\060\uff78\067\uff78\071\uff78\072\uff78\073\uff78\074" +
    "\uff78\001\002\000\006\064\uff77\067\uff77\001\002\000\004" +
    "\067\143\001\002\000\004\064\144\001\002\000\066\006" +
    "\uffb7\007\uffb7\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\037\uffb7\041\uffb7\042\uffb7" +
    "\060\uffb7\067\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\001" +
    "\002\000\004\067\150\001\002\000\004\064\147\001\002" +
    "\000\066\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6\037\uffb6\041" +
    "\uffb6\042\uffb6\060\uffb6\067\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\001\002\000\004\043\151\001\002\000\010\005" +
    "\153\070\154\075\152\001\002\000\006\064\163\065\164" +
    "\001\002\000\004\067\160\001\002\000\004\067\155\001" +
    "\002\000\004\070\156\001\002\000\004\064\157\001\002" +
    "\000\066\006\uffb3\007\uffb3\010\uffb3\012\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\027\uffb3\030\uffb3\031\uffb3\037\uffb3\041" +
    "\uffb3\042\uffb3\060\uffb3\067\uffb3\071\uffb3\072\uffb3\073\uffb3" +
    "\074\uffb3\001\002\000\004\005\161\001\002\000\004\064" +
    "\162\001\002\000\066\006\uffb2\007\uffb2\010\uffb2\012\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\037\uffb2\041\uffb2\042\uffb2\060\uffb2\067\uffb2\071\uffb2\072" +
    "\uffb2\073\uffb2\074\uffb2\001\002\000\066\006\uffb5\007\uffb5" +
    "\010\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\037\uffb5\041\uffb5\042\uffb5\060\uffb5\067" +
    "\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\001\002\000\004" +
    "\075\165\001\002\000\004\064\166\001\002\000\066\006" +
    "\uffb4\007\uffb4\010\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\037\uffb4\041\uffb4\042\uffb4" +
    "\060\uffb4\067\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\001" +
    "\002\000\010\005\174\056\173\067\175\001\002\000\012" +
    "\005\uff68\056\uff68\066\172\067\uff68\001\002\000\010\005" +
    "\uff6a\056\uff6a\067\uff6a\001\002\000\010\005\uff69\056\uff69" +
    "\067\uff69\001\002\000\004\064\203\001\002\000\004\067" +
    "\200\001\002\000\012\005\uff6e\056\uff6e\066\177\067\uff6e" +
    "\001\002\000\010\005\uff6b\056\uff6b\067\uff6b\001\002\000" +
    "\010\005\uff70\056\uff70\067\uff70\001\002\000\004\005\201" +
    "\001\002\000\012\005\uff6d\056\uff6d\066\202\067\uff6d\001" +
    "\002\000\010\005\uff6f\056\uff6f\067\uff6f\001\002\000\066" +
    "\006\uff6c\007\uff6c\010\uff6c\012\uff6c\013\uff6c\014\uff6c\015" +
    "\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c\023\uff6c\024\uff6c" +
    "\025\uff6c\027\uff6c\030\uff6c\031\uff6c\037\uff6c\041\uff6c\042" +
    "\uff6c\060\uff6c\067\uff6c\071\uff6c\072\uff6c\073\uff6c\074\uff6c" +
    "\001\002\000\006\043\206\064\205\001\002\000\066\006" +
    "\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\037\uffd0\041\uffd0\042\uffd0" +
    "\060\uffd0\067\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\001" +
    "\002\000\004\075\207\001\002\000\006\064\210\065\211" +
    "\001\002\000\066\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\027\uffc2\030\uffc2\031\uffc2\037" +
    "\uffc2\041\uffc2\042\uffc2\060\uffc2\067\uffc2\071\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\001\002\000\004\075\212\001\002\000" +
    "\004\064\213\001\002\000\066\006\uffc1\007\uffc1\010\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\037\uffc1\041\uffc1\042\uffc1\060\uffc1\067\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\074\uffc1\001\002\000\066\006\uffe3" +
    "\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\037\uffe3\041\uffe3\042\uffe3\060" +
    "\uffe3\067\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\001\002" +
    "\000\060\006\032\007\043\010\031\012\052\013\037\014" +
    "\045\015\041\016\026\017\067\020\044\021\051\023\057" +
    "\024\030\027\036\030\064\031\055\041\047\042\066\067" +
    "\063\071\046\072\060\073\065\074\035\001\002\000\062" +
    "\006\032\007\043\010\031\012\052\013\037\014\045\015" +
    "\041\016\026\017\067\020\044\021\051\023\057\024\030" +
    "\027\036\030\064\031\230\041\047\042\066\060\220\067" +
    "\063\071\046\072\060\073\065\074\035\001\002\000\066" +
    "\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\027\ufff0\030\ufff0\031\ufff0\037\ufff0\041\ufff0\042" +
    "\ufff0\060\ufff0\067\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0" +
    "\001\002\000\004\013\242\001\002\000\066\006\uffdc\007" +
    "\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\037\uffdc\041\uffdc\042\uffdc\060\uffdc" +
    "\067\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\001\002\000" +
    "\066\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\023\uffec\024" +
    "\uffec\025\uffec\027\uffec\030\uffec\031\uffec\037\uffec\041\uffec" +
    "\042\uffec\060\uffec\067\uffec\071\uffec\072\uffec\073\uffec\074" +
    "\uffec\001\002\000\066\006\uffe8\007\uffe8\010\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\037\uffe8\041\uffe8\042\uffe8\060\uffe8\067\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\001\002\000\070\006\ufff2\007\ufff2" +
    "\010\ufff2\011\236\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\037\ufff2\041\ufff2\042\ufff2\060" +
    "\ufff2\067\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\001\002" +
    "\000\066\006\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\027\uffe0\030\uffe0\031\uffe0\037\uffe0\041" +
    "\uffe0\042\uffe0\060\uffe0\067\uffe0\071\uffe0\072\uffe0\073\uffe0" +
    "\074\uffe0\001\002\000\066\006\uffde\007\uffde\010\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\023\uffde\024\uffde\025\uffde\027\uffde\030\uffde\031" +
    "\uffde\037\uffde\041\uffde\042\uffde\060\uffde\067\uffde\071\uffde" +
    "\072\uffde\073\uffde\074\uffde\001\002\000\066\006\uffe6\007" +
    "\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\037\uffe6\041\uffe6\042\uffe6\060\uffe6" +
    "\067\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\001\002\000" +
    "\004\064\235\001\002\000\066\006\ufff4\007\ufff4\010\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\037\ufff4\041\ufff4\042\ufff4\060\ufff4\067\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\001\002\000\066\006\uffe2" +
    "\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\037\uffe2\041\uffe2\042\uffe2\060" +
    "\uffe2\067\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\001\002" +
    "\000\066\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\023\uffee" +
    "\024\uffee\025\uffee\027\uffee\030\uffee\031\uffee\037\uffee\041" +
    "\uffee\042\uffee\060\uffee\067\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\001\002\000\066\006\uffea\007\uffea\010\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\023\uffea\024\uffea\025\uffea\027\uffea\030\uffea\031" +
    "\uffea\037\uffea\041\uffea\042\uffea\060\uffea\067\uffea\071\uffea" +
    "\072\uffea\073\uffea\074\uffea\001\002\000\066\006\uffe4\007" +
    "\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\037\uffe4\041\uffe4\042\uffe4\060\uffe4" +
    "\067\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\001\002\000" +
    "\004\057\237\001\002\000\060\006\032\007\043\010\031" +
    "\012\052\013\037\014\045\015\041\016\026\017\067\020" +
    "\044\021\051\023\057\024\030\027\036\030\064\031\055" +
    "\041\047\042\066\067\063\071\046\072\060\073\065\074" +
    "\035\001\002\000\062\006\032\007\043\010\031\012\052" +
    "\013\037\014\045\015\041\016\026\017\067\020\044\021" +
    "\051\023\057\024\030\027\036\030\064\031\230\041\047" +
    "\042\066\060\241\067\063\071\046\072\060\073\065\074" +
    "\035\001\002\000\066\006\uffb1\007\uffb1\010\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\037\uffb1\041\uffb1\042\uffb1\060\uffb1\067\uffb1\071\uffb1\072" +
    "\uffb1\073\uffb1\074\uffb1\001\002\000\004\055\243\001\002" +
    "\000\006\054\245\067\246\001\002\000\004\056\265\001" +
    "\002\000\006\056\uffae\064\uffae\001\002\000\014\051\251" +
    "\056\uffaf\064\uffaf\102\247\103\250\001\002\000\006\067" +
    "\264\075\263\001\002\000\006\067\262\075\261\001\002" +
    "\000\012\005\253\054\254\067\255\075\252\001\002\000" +
    "\006\056\uffa8\064\uffa8\001\002\000\006\005\256\067\257" +
    "\001\002\000\006\056\uffad\064\uffad\001\002\000\006\056" +
    "\uffa7\064\uffa7\001\002\000\006\056\uffa6\064\uffa6\001\002" +
    "\000\004\005\260\001\002\000\006\056\uffa5\064\uffa5\001" +
    "\002\000\006\056\uffac\064\uffac\001\002\000\006\056\uffaa" +
    "\064\uffaa\001\002\000\006\056\uffab\064\uffab\001\002\000" +
    "\006\056\uffa9\064\uffa9\001\002\000\004\064\266\001\002" +
    "\000\066\006\uffa3\007\uffa3\010\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3\037\uffa3\041" +
    "\uffa3\042\uffa3\060\uffa3\067\uffa3\071\uffa3\072\uffa3\073\uffa3" +
    "\074\uffa3\001\002\000\006\043\271\064\270\001\002\000" +
    "\066\006\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7\037\uffd7\041\uffd7" +
    "\042\uffd7\060\uffd7\067\uffd7\071\uffd7\072\uffd7\073\uffd7\074" +
    "\uffd7\001\002\000\004\070\272\001\002\000\004\067\273" +
    "\001\002\000\004\070\274\001\002\000\004\064\275\001" +
    "\002\000\066\006\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc\037\uffcc" +
    "\041\uffcc\042\uffcc\060\uffcc\067\uffcc\071\uffcc\072\uffcc\073" +
    "\uffcc\074\uffcc\001\002\000\004\067\277\001\002\000\004" +
    "\056\300\001\002\000\004\057\301\001\002\000\004\026" +
    "\302\001\002\000\004\075\314\001\002\000\006\026\302" +
    "\032\305\001\002\000\006\026\uff86\032\uff86\001\002\000" +
    "\004\104\307\001\002\000\006\026\uff87\032\uff87\001\002" +
    "\000\060\006\032\007\043\010\031\012\052\013\037\014" +
    "\045\015\041\016\026\017\067\020\044\021\051\023\057" +
    "\024\030\027\036\030\064\031\055\041\047\042\066\067" +
    "\063\071\046\072\060\073\065\074\035\001\002\000\062" +
    "\006\032\007\043\010\031\012\052\013\037\014\045\015" +
    "\041\016\026\017\067\020\044\021\051\023\057\024\030" +
    "\025\311\027\036\030\064\031\230\041\047\042\066\067" +
    "\063\071\046\072\060\073\065\074\035\001\002\000\004" +
    "\064\312\001\002\000\004\060\313\001\002\000\066\006" +
    "\uff88\007\uff88\010\uff88\012\uff88\013\uff88\014\uff88\015\uff88" +
    "\016\uff88\017\uff88\020\uff88\021\uff88\023\uff88\024\uff88\025" +
    "\uff88\027\uff88\030\uff88\031\uff88\037\uff88\041\uff88\042\uff88" +
    "\060\uff88\067\uff88\071\uff88\072\uff88\073\uff88\074\uff88\001" +
    "\002\000\004\104\315\001\002\000\060\006\032\007\043" +
    "\010\031\012\052\013\037\014\045\015\041\016\026\017" +
    "\067\020\044\021\051\023\057\024\030\027\036\030\064" +
    "\031\055\041\047\042\066\067\063\071\046\072\060\073" +
    "\065\074\035\001\002\000\062\006\032\007\043\010\031" +
    "\012\052\013\037\014\045\015\041\016\026\017\067\020" +
    "\044\021\051\023\057\024\030\025\317\027\036\030\064" +
    "\031\230\041\047\042\066\067\063\071\046\072\060\073" +
    "\065\074\035\001\002\000\004\064\320\001\002\000\006" +
    "\026\uff85\032\uff85\001\002\000\010\005\174\056\323\067" +
    "\175\001\002\000\010\005\uff71\056\uff71\067\uff71\001\002" +
    "\000\004\064\325\001\002\000\010\005\uff72\056\uff72\067" +
    "\uff72\001\002\000\066\006\uff73\007\uff73\010\uff73\012\uff73" +
    "\013\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021" +
    "\uff73\023\uff73\024\uff73\025\uff73\027\uff73\030\uff73\031\uff73" +
    "\037\uff73\041\uff73\042\uff73\060\uff73\067\uff73\071\uff73\072" +
    "\uff73\073\uff73\074\uff73\001\002\000\022\006\333\015\334" +
    "\016\337\020\330\023\327\024\332\027\335\067\336\001" +
    "\002\000\004\067\u011a\001\002\000\004\067\u0113\001\002" +
    "\000\004\056\u010f\001\002\000\004\067\u0108\001\002\000" +
    "\004\067\u0101\001\002\000\004\067\372\001\002\000\004" +
    "\067\363\001\002\000\004\043\355\001\002\000\004\067" +
    "\340\001\002\000\004\043\341\001\002\000\004\075\342" +
    "\001\002\000\004\064\343\001\002\000\006\054\245\067" +
    "\246\001\002\000\004\064\345\001\002\000\006\053\347" +
    "\067\350\001\002\000\004\056\uff66\001\002\000\004\067" +
    "\354\001\002\000\006\052\351\053\352\001\002\000\004" +
    "\075\353\001\002\000\004\056\uff5e\001\002\000\004\056" +
    "\uff5f\001\002\000\004\056\uff5d\001\002\000\004\075\356" +
    "\001\002\000\004\064\357\001\002\000\006\054\245\067" +
    "\246\001\002\000\004\064\361\001\002\000\006\053\347" +
    "\067\350\001\002\000\004\056\uff60\001\002\000\004\043" +
    "\364\001\002\000\004\075\365\001\002\000\004\064\366" +
    "\001\002\000\006\054\245\067\246\001\002\000\004\064" +
    "\370\001\002\000\006\053\347\067\350\001\002\000\004" +
    "\056\uff65\001\002\000\004\043\373\001\002\000\004\075" +
    "\374\001\002\000\004\064\375\001\002\000\006\054\245" +
    "\067\246\001\002\000\004\064\377\001\002\000\006\053" +
    "\347\067\350\001\002\000\004\056\uff67\001\002\000\004" +
    "\043\u0102\001\002\000\004\075\u0103\001\002\000\004\064" +
    "\u0104\001\002\000\006\054\245\067\246\001\002\000\004" +
    "\064\u0106\001\002\000\006\053\347\067\350\001\002\000" +
    "\004\056\uff61\001\002\000\004\043\u0109\001\002\000\004" +
    "\075\u010a\001\002\000\004\064\u010b\001\002\000\006\054" +
    "\245\067\246\001\002\000\004\064\u010d\001\002\000\006" +
    "\053\347\067\350\001\002\000\004\056\uff64\001\002\000" +
    "\004\057\u0110\001\002\000\060\006\032\007\043\010\031" +
    "\012\052\013\037\014\045\015\041\016\026\017\067\020" +
    "\044\021\051\023\057\024\030\027\036\030\064\031\055" +
    "\041\047\042\066\067\063\071\046\072\060\073\065\074" +
    "\035\001\002\000\062\006\032\007\043\010\031\012\052" +
    "\013\037\014\045\015\041\016\026\017\067\020\044\021" +
    "\051\023\057\024\030\027\036\030\064\031\230\041\047" +
    "\042\066\060\u0112\067\063\071\046\072\060\073\065\074" +
    "\035\001\002\000\066\006\uffa2\007\uffa2\010\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\037\uffa2\041\uffa2\042\uffa2\060\uffa2\067\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\074\uffa2\001\002\000\004\043\u0114\001\002" +
    "\000\004\075\u0115\001\002\000\004\064\u0116\001\002\000" +
    "\006\054\245\067\246\001\002\000\004\064\u0118\001\002" +
    "\000\006\053\347\067\350\001\002\000\004\056\uff62\001" +
    "\002\000\004\043\u011b\001\002\000\004\075\u011c\001\002" +
    "\000\004\064\u011d\001\002\000\006\054\245\067\246\001" +
    "\002\000\004\064\u011f\001\002\000\006\053\347\067\350" +
    "\001\002\000\004\056\uff63\001\002\000\006\043\u0123\064" +
    "\u0122\001\002\000\066\006\uffd5\007\uffd5\010\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\037\uffd5\041\uffd5\042\uffd5\060\uffd5\067\uffd5\071\uffd5\072" +
    "\uffd5\073\uffd5\074\uffd5\001\002\000\004\075\u0124\001\002" +
    "\000\006\064\u0125\065\u0126\001\002\000\066\006\uffc9\007" +
    "\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\037\uffc9\041\uffc9\042\uffc9\060\uffc9" +
    "\067\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\001\002\000" +
    "\004\075\u0127\001\002\000\004\064\u0128\001\002\000\066" +
    "\006\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\027\uffc8\030\uffc8\031\uffc8\037\uffc8\041\uffc8\042" +
    "\uffc8\060\uffc8\067\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8" +
    "\001\002\000\010\043\u012c\052\u012a\064\u012b\001\002\000" +
    "\004\005\u0133\001\002\000\066\006\uffd3\007\uffd3\010\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\037\uffd3\041\uffd3\042\uffd3\060\uffd3\067\uffd3\071" +
    "\uffd3\072\uffd3\073\uffd3\074\uffd3\001\002\000\004\005\u012d" +
    "\001\002\000\006\005\u012e\067\u012f\001\002\000\004\064" +
    "\u0132\001\002\000\004\005\u0130\001\002\000\004\064\u0131" +
    "\001\002\000\066\006\uffb8\007\uffb8\010\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8\037" +
    "\uffb8\041\uffb8\042\uffb8\060\uffb8\067\uffb8\071\uffb8\072\uffb8" +
    "\073\uffb8\074\uffb8\001\002\000\066\006\uffba\007\uffba\010" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\023\uffba\024\uffba\025\uffba\027\uffba\030" +
    "\uffba\031\uffba\037\uffba\041\uffba\042\uffba\060\uffba\067\uffba" +
    "\071\uffba\072\uffba\073\uffba\074\uffba\001\002\000\006\005" +
    "\u0134\067\u0135\001\002\000\004\064\u0138\001\002\000\004" +
    "\005\u0136\001\002\000\004\064\u0137\001\002\000\066\006" +
    "\uffb9\007\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\037\uffb9\041\uffb9\042\uffb9" +
    "\060\uffb9\067\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\001" +
    "\002\000\066\006\uffbb\007\uffbb\010\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb\037\uffbb" +
    "\041\uffbb\042\uffbb\060\uffbb\067\uffbb\071\uffbb\072\uffbb\073" +
    "\uffbb\074\uffbb\001\002\000\006\043\u013b\064\u013a\001\002" +
    "\000\066\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8\037\uffd8\041" +
    "\uffd8\042\uffd8\060\uffd8\067\uffd8\071\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\001\002\000\004\075\u013c\001\002\000\004\064" +
    "\u013d\001\002\000\066\006\uffcd\007\uffcd\010\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\037\uffcd\041\uffcd\042\uffcd\060\uffcd\067\uffcd\071\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\001\002\000\006\054\245\067\246" +
    "\001\002\000\004\056\u0140\001\002\000\004\057\u0141\001" +
    "\002\000\060\006\032\007\043\010\031\012\052\013\037" +
    "\014\045\015\041\016\026\017\067\020\044\021\051\023" +
    "\057\024\030\027\036\030\064\031\055\041\047\042\066" +
    "\067\063\071\046\072\060\073\065\074\035\001\002\000" +
    "\062\006\032\007\043\010\031\012\052\013\037\014\045" +
    "\015\041\016\026\017\067\020\044\021\051\023\057\024" +
    "\030\027\036\030\064\031\230\041\047\042\066\060\u0143" +
    "\067\063\071\046\072\060\073\065\074\035\001\002\000" +
    "\066\006\uffa4\007\uffa4\010\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\027\uffa4\030\uffa4\031\uffa4\037\uffa4\041\uffa4" +
    "\042\uffa4\060\uffa4\067\uffa4\071\uffa4\072\uffa4\073\uffa4\074" +
    "\uffa4\001\002\000\006\043\u0146\064\u0145\001\002\000\066" +
    "\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\027\uffd4\030\uffd4\031\uffd4\037\uffd4\041\uffd4\042" +
    "\uffd4\060\uffd4\067\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4" +
    "\001\002\000\004\075\u0147\001\002\000\006\064\u0148\065" +
    "\u0149\001\002\000\066\006\uffc7\007\uffc7\010\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\037\uffc7\041\uffc7\042\uffc7\060\uffc7\067\uffc7\071\uffc7\072" +
    "\uffc7\073\uffc7\074\uffc7\001\002\000\004\075\u014a\001\002" +
    "\000\004\064\u014b\001\002\000\066\006\uffc6\007\uffc6\010" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\037\uffc6\041\uffc6\042\uffc6\060\uffc6\067\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\001\002\000\010\005" +
    "\uff7d\064\uff7d\067\uff7d\001\002\000\004\067\u0153\001\002" +
    "\000\010\005\u014d\064\u0152\067\u014f\001\002\000\012\005" +
    "\uff7a\064\uff7a\067\uff7a\105\u0150\001\002\000\010\005\uff7c" +
    "\064\uff7c\067\uff7c\001\002\000\010\005\uff7e\064\uff7e\067" +
    "\uff7e\001\002\000\066\006\uff7f\007\uff7f\010\uff7f\012\uff7f" +
    "\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021" +
    "\uff7f\023\uff7f\024\uff7f\025\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\037\uff7f\041\uff7f\042\uff7f\060\uff7f\067\uff7f\071\uff7f\072" +
    "\uff7f\073\uff7f\074\uff7f\001\002\000\004\005\u0154\001\002" +
    "\000\012\005\uff79\064\uff79\067\uff79\105\u0155\001\002\000" +
    "\010\005\uff7b\064\uff7b\067\uff7b\001\002\000\004\075\u0157" +
    "\001\002\000\004\064\u0158\001\002\000\004\060\u0159\001" +
    "\002\000\004\002\000\001\002\000\004\067\u016b\001\002" +
    "\000\012\043\u015f\052\u015c\053\u015e\064\u015d\001\002\000" +
    "\004\075\u0166\001\002\000\066\006\uffcf\007\uffcf\010\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\037\uffcf\041\uffcf\042\uffcf\060\uffcf\067\uffcf\071" +
    "\uffcf\072\uffcf\073\uffcf\074\uffcf\001\002\000\004\064\u0165" +
    "\001\002\000\004\075\u0160\001\002\000\006\064\u0161\065" +
    "\u0162\001\002\000\066\006\uffbf\007\uffbf\010\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\037\uffbf\041\uffbf\042\uffbf\060\uffbf\067\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\001\002\000\004\075\u0163\001\002" +
    "\000\004\064\u0164\001\002\000\066\006\uffbe\007\uffbe\010" +
    "\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\037\uffbe\041\uffbe\042\uffbe\060\uffbe\067\uffbe" +
    "\071\uffbe\072\uffbe\073\uffbe\074\uffbe\001\002\000\066\006" +
    "\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\037\uffbd\041\uffbd\042\uffbd" +
    "\060\uffbd\067\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\001" +
    "\002\000\006\064\u0167\065\u0168\001\002\000\066\006\uffce" +
    "\007\uffce\010\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\023\uffce\024\uffce\025\uffce" +
    "\027\uffce\030\uffce\031\uffce\037\uffce\041\uffce\042\uffce\060" +
    "\uffce\067\uffce\071\uffce\072\uffce\073\uffce\074\uffce\001\002" +
    "\000\004\075\u0169\001\002\000\004\064\u016a\001\002\000" +
    "\066\006\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\037\uffc0\041\uffc0" +
    "\042\uffc0\060\uffc0\067\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\001\002\000\004\064\u016c\001\002\000\066\006\uffbc" +
    "\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\037\uffbc\041\uffbc\042\uffbc\060" +
    "\uffbc\067\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\001\002" +
    "\000\006\054\245\067\246\001\002\000\004\056\u016f\001" +
    "\002\000\004\057\u0170\001\002\000\060\006\032\007\043" +
    "\010\031\012\052\013\037\014\045\015\041\016\026\017" +
    "\067\020\044\021\051\023\057\024\030\027\036\030\064" +
    "\031\055\041\047\042\066\067\063\071\046\072\060\073" +
    "\065\074\035\001\002\000\062\006\032\007\043\010\031" +
    "\012\052\013\037\014\045\015\041\016\026\017\067\020" +
    "\044\021\051\023\057\024\030\027\036\030\064\031\230" +
    "\041\047\042\066\060\u0172\067\063\071\046\072\060\073" +
    "\065\074\035\001\002\000\070\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\037\uffb0\041\uffb0\042\uffb0\060\uffb0\067" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\001\002\000\006" +
    "\043\u0175\064\u0174\001\002\000\066\006\uffd1\007\uffd1\010" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\037\uffd1\041\uffd1\042\uffd1\060\uffd1\067\uffd1" +
    "\071\uffd1\072\uffd1\073\uffd1\074\uffd1\001\002\000\004\075" +
    "\u0176\001\002\000\006\064\u0177\065\u0178\001\002\000\066" +
    "\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\027\uffc4\030\uffc4\031\uffc4\037\uffc4\041\uffc4\042" +
    "\uffc4\060\uffc4\067\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4" +
    "\001\002\000\004\075\u0179\001\002\000\004\064\u017a\001" +
    "\002\000\066\006\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3\037\uffc3" +
    "\041\uffc3\042\uffc3\060\uffc3\067\uffc3\071\uffc3\072\uffc3\073" +
    "\uffc3\074\uffc3\001\002\000\006\043\u017d\064\u017c\001\002" +
    "\000\066\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\037\uffd6\041" +
    "\uffd6\042\uffd6\060\uffd6\067\uffd6\071\uffd6\072\uffd6\073\uffd6" +
    "\074\uffd6\001\002\000\004\075\u017e\001\002\000\006\064" +
    "\u017f\065\u0180\001\002\000\066\006\uffcb\007\uffcb\010\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\037\uffcb\041\uffcb\042\uffcb\060\uffcb\067\uffcb\071" +
    "\uffcb\072\uffcb\073\uffcb\074\uffcb\001\002\000\004\075\u0181" +
    "\001\002\000\004\064\u0182\001\002\000\066\006\uffca\007" +
    "\uffca\010\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\023\uffca\024\uffca\025\uffca\027" +
    "\uffca\030\uffca\031\uffca\037\uffca\041\uffca\042\uffca\060\uffca" +
    "\067\uffca\071\uffca\072\uffca\073\uffca\074\uffca\001\002\000" +
    "\004\056\u0184\001\002\000\004\057\u0185\001\002\000\060" +
    "\006\032\007\043\010\031\012\052\013\037\014\045\015" +
    "\041\016\026\017\067\020\044\021\051\023\057\024\030" +
    "\027\036\030\064\031\055\041\047\042\066\067\063\071" +
    "\046\072\060\073\065\074\035\001\002\000\062\006\032" +
    "\007\043\010\031\012\052\013\037\014\045\015\041\016" +
    "\026\017\067\020\044\021\051\023\057\024\030\027\036" +
    "\030\064\031\230\037\u0187\041\047\042\066\067\063\071" +
    "\046\072\060\073\065\074\035\001\002\000\004\075\u0188" +
    "\001\002\000\004\064\u0189\001\002\000\004\060\u018a\001" +
    "\002\000\004\002\uffff\001\002\000\004\067\u0199\001\002" +
    "\000\006\005\u018d\102\u018e\001\002\000\004\067\u0194\001" +
    "\002\000\004\067\u018f\001\002\000\006\065\u0191\103\u0190" +
    "\001\002\000\012\015\ufff7\030\ufff7\063\ufff7\077\ufff7\001" +
    "\002\000\004\067\u0192\001\002\000\004\103\u0193\001\002" +
    "\000\012\015\ufff8\030\ufff8\063\ufff8\077\ufff8\001\002\000" +
    "\006\005\u0195\065\u0196\001\002\000\012\015\ufff5\030\ufff5" +
    "\063\ufff5\077\ufff5\001\002\000\004\067\u0197\001\002\000" +
    "\004\005\u0198\001\002\000\012\015\ufff6\030\ufff6\063\ufff6" +
    "\077\ufff6\001\002\000\010\005\u019b\070\u019c\075\u019a\001" +
    "\002\000\014\015\uff83\030\uff83\063\uff83\065\u01a1\077\uff83" +
    "\001\002\000\004\067\u019f\001\002\000\004\067\u019d\001" +
    "\002\000\004\070\u019e\001\002\000\012\015\uff80\030\uff80" +
    "\063\uff80\077\uff80\001\002\000\004\005\u01a0\001\002\000" +
    "\012\015\uff81\030\uff81\063\uff81\077\uff81\001\002\000\004" +
    "\075\u01a2\001\002\000\012\015\uff82\030\uff82\063\uff82\077" +
    "\uff82\001\002\000\004\057\u01a4\001\002\000\032\006\032" +
    "\007\043\015\041\016\026\017\067\020\044\021\051\023" +
    "\057\024\030\027\036\030\064\067\063\001\002\000\034" +
    "\006\032\007\043\015\041\016\026\017\067\020\044\021" +
    "\051\023\057\024\030\027\036\030\064\060\u01a8\067\063" +
    "\001\002\000\034\006\uffd9\007\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\027\uffd9\030\uffd9" +
    "\060\uffd9\067\uffd9\001\002\000\034\006\uffda\007\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\023\uffda\024\uffda" +
    "\027\uffda\030\uffda\060\uffda\067\uffda\001\002\000\004\064" +
    "\u01a9\001\002\000\012\015\uff84\030\uff84\063\uff84\077\uff84" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a7\000\014\002\011\006\006\007\004\020\005\042" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\015\007\014\020\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\032\004" +
    "\055\010\041\011\024\014\067\021\053\022\052\023\026" +
    "\024\047\025\060\031\061\032\033\035\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\230\010\223\011\216\014\233\021\226\022\225\023\220" +
    "\024\224\025\231\031\232\032\221\035\222\001\001\000" +
    "\002\001\001\000\006\026\u014d\043\u014b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\320\045\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\166" +
    "\047\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\133\030\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\215\004\055\010\041\011\024" +
    "\014\067\021\053\022\052\023\026\024\047\025\060\031" +
    "\061\032\033\035\037\001\001\000\032\004\230\010\223" +
    "\011\216\014\233\021\226\022\225\023\220\024\224\025" +
    "\231\031\232\032\221\035\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\237\004" +
    "\055\010\041\011\024\014\067\021\053\022\052\023\026" +
    "\024\047\025\060\031\061\032\033\035\037\001\001\000" +
    "\032\004\230\010\223\011\216\014\233\021\226\022\225" +
    "\023\220\024\224\025\231\031\232\032\221\035\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\302\037\303\001\001\000\002\001\001" +
    "\000\004\037\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\307\004\055\010\041" +
    "\011\024\014\067\021\053\022\052\023\026\024\047\025" +
    "\060\031\061\032\033\035\037\001\001\000\032\004\230" +
    "\010\223\011\216\014\233\021\226\022\225\023\220\024" +
    "\224\025\231\031\232\032\221\035\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\315\004\055\010\041\011\024\014\067" +
    "\021\053\022\052\023\026\024\047\025\060\031\061\032" +
    "\033\035\037\001\001\000\032\004\230\010\223\011\216" +
    "\014\233\021\226\022\225\023\220\024\224\025\231\031" +
    "\232\032\221\035\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\343\001\001\000\002\001\001\000\004\005" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\357\001\001\000\002\001\001\000\004\005" +
    "\361\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\366\001\001\000" +
    "\002\001\001\000\004\005\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\375\001\001\000\002\001\001\000\004\005\377" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u0104\001\001\000\002" +
    "\001\001\000\004\005\u0106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u010b\001\001\000\002\001\001\000\004\005\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\u0110" +
    "\004\055\010\041\011\024\014\067\021\053\022\052\023" +
    "\026\024\047\025\060\031\061\032\033\035\037\001\001" +
    "\000\032\004\230\010\223\011\216\014\233\021\226\022" +
    "\225\023\220\024\224\025\231\031\232\032\221\035\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u0116\001\001\000\002" +
    "\001\001\000\004\005\u0118\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u011d\001\001\000\002\001\001\000\004\005\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\u013e\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\u0141\004\055\010\041" +
    "\011\024\014\067\021\053\022\052\023\026\024\047\025" +
    "\060\031\061\032\033\035\037\001\001\000\032\004\230" +
    "\010\223\011\216\014\233\021\226\022\225\023\220\024" +
    "\224\025\231\031\232\032\221\035\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u0150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\u0170\004\055\010\041\011\024\014\067\021" +
    "\053\022\052\023\026\024\047\025\060\031\061\032\033" +
    "\035\037\001\001\000\032\004\230\010\223\011\216\014" +
    "\233\021\226\022\225\023\220\024\224\025\231\031\232" +
    "\032\221\035\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\u0185\004\055\010\041\011" +
    "\024\014\067\021\053\022\052\023\026\024\047\025\060" +
    "\031\061\032\033\035\037\001\001\000\032\004\230\010" +
    "\223\011\216\014\233\021\226\022\225\023\220\024\224" +
    "\025\231\031\232\032\221\035\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\u01a5" +
    "\041\u01a4\001\001\000\004\004\u01a6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCIA_FOR ::= Float Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA_FOR ::= Short Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA_FOR ::= Unsigned Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA_FOR ::= Long Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA_FOR ::= Double Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SCANF_PARAM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF_PARAM",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SCANF_PARAM ::= Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF_PARAM",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SCANF_LIST ::= SCANF_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF_LIST",36, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SCANF_LIST ::= SCANF_LIST PRINTF_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF_LIST",36, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SCANF ::= Scanf SCANF_LIST Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PRINTF_PARAM ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PRINTF_PARAM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PRINTF_PARAM ::= Comillas Identificador Comillas Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PRINTF_PARAM ::= Identificador Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_PARAM",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PRINTF_LIST ::= PRINTF_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_LIST",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PRINTF_LIST ::= PRINTF_LIST PRINTF_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF_LIST",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PRINTF ::= Printf PRINTF_LIST Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CIN_PARAM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_PARAM",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CIN_PARAM ::= Identificador Op_cin 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_PARAM",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CIN_LIST ::= CIN_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_LIST",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CIN_LIST ::= CIN_LIST CIN_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN_LIST",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CIN ::= Cin CIN_LIST P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // COUT_PARAM ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // COUT_PARAM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // COUT_PARAM ::= Comillas Identificador Comillas Op_cout 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // COUT_PARAM ::= Identificador Op_cout 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_PARAM",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // COUT_LIST ::= COUT_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_LIST",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // COUT_LIST ::= COUT_LIST COUT_PARAM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT_LIST",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // COUT ::= Cout COUT_LIST P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DEFINE ::= Numeral Define Identificador Comilla_simple Identificador Comilla_simple 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DEFINE ::= Numeral Define Identificador Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DEFINE ::= Numeral Define Identificador Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DEFINE ::= Numeral Define Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DEFINE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // STRUCT ::= Struct Identificador Llave_a DECLARACION_LIST Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("STRUCT",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_LIST_CASE ::= SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LIST_CASE",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_LIST_CASE ::= SENTENCIA_LIST_CASE SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LIST_CASE",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_LIST_CASE Default Dos_puntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONST ::= Const T_dato Igual Numero Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONST ::= Const Bool Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONST ::= Const Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONST ::= Const Char Identificador Igual Comilla_simple Identificador Comilla_simple P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONST ::= Const Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONST ::= Const Float Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONST ::= Const Short Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONST ::= Const Short Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONST ::= Const Unsigned Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONST ::= Const Unsigned Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONST ::= Const Long Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONST ::= Const Long Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONST ::= Const Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONST ::= Const Double Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONST ::= Const Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONST",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TYPEDEF ::= Typedef T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TYPEDEF ::= Typedef Bool Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TYPEDEF ::= Typedef Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TYPEDEF ::= Typedef Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TYPEDEF ::= Typedef Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TYPEDEF ::= Typedef Short Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TYPEDEF ::= Typedef Unsigned Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TYPEDEF ::= Typedef Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TYPEDEF ::= Typedef Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TYPEDEF ::= Typedef Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEDEF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DO ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_BOOLEANA ::= Identificador Menor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_BOOLEANA ::= Identificador Mayor Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_BOOLEANA ::= Identificador Menor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_BOOLEANA ::= Identificador Mayor Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_BOOLEANA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Identificador Punto Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Identificador Punto Identificador Igual Comilla_simple Identificador Comilla_simple P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= Identificador Punto Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= Identificador Punto Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= Struct Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= T_dato Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= T_dato Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Short Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Short Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Unsigned Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Unsigned Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Bool Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Long Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Long Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Float Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Double Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Char Identificador Igual Comilla_simple Identificador Comilla_simple P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Short Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Unsigned Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Bool Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_LIST ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_LIST ::= DECLARACION_LIST DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_LIST",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= TYPEDEF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA TYPEDEF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= DO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA DO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INCLUDE ::= Numeral Include Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INCLUDE ::= Numeral Include Comillas Identificador Punto Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INCLUDE ::= Numeral Include Menor Identificador Mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INCLUDE ::= Numeral Include Menor Identificador Punto Identificador Mayor 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABECERA ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CABECERA ::= CABECERA STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABECERA ::= DEFINE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABECERA ::= CABECERA DEFINE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CABECERA ::= INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CABECERA ::= CABECERA INCLUDE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CABECERA",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CABECERA Main Parent_a Parent_c Llave_a SENTENCIA Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CABECERA Int Main Parent_a Parent_c Llave_a SENTENCIA Return Numero P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

